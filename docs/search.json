[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 quollr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":[]},{"path":"/articles/algomain.html","id":"number-of-bins-along-the-x-axis","dir":"Articles","previous_headings":"Constructing the model in the 2D space > 1. Compute hexagonal grid configurations","what":"Number of bins along the x-axis","title":"1. Main steps","text":"begin algorithm, need determine number bins along x-axis creating regular hexagons hexagonal grid.","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled,                                          x = \"UMAP1\", hex_size = 0.2) num_bins_x  #> [1] 5"},{"path":"/articles/algomain.html","id":"number-of-bins-along-the-y-axis","dir":"Articles","previous_headings":"Constructing the model in the 2D space > 1. Compute hexagonal grid configurations","what":"Number of bins along the y-axis","title":"1. Main steps","text":", need determine shape parameter, control shape size hexagons hexagonal grid.","code":"num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,                                          y = \"UMAP2\", hex_size = 0.2) num_bins_y  #> [1] 8"},{"path":"/articles/algomain.html","id":"obtain-hexagonal-bin-centroids","dir":"Articles","previous_headings":"Constructing the model in the 2D space","what":"2. Obtain hexagonal bin centroids","title":"1. Main steps","text":"","code":"hb_obj <- generate_hex_binning_info(nldr_df = s_curve_noise_umap_scaled,                             x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x,                             num_bins_y = num_bins_y, x_start = NA,                             y_start = NA, buffer_x = NA,                             buffer_y = NA, hex_size = 0.2)  all_centroids_df <- as.data.frame(do.call(cbind, hb_obj$full_grid_hex_centroids)) counts_df <- as.data.frame(do.call(cbind, hb_obj$hex_id_with_std_counts))  df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df,                                               counts_df = counts_df) glimpse(df_bin_centroids)  #> Rows: 10 #> Columns: 4 #> $ hexID      <dbl> 2, 6, 7, 12, 13, 18, 24, 28, 29, 34 #> $ c_x        <dbl> 0.1732051, 0.0000000, 0.3464102, 0.1732051, 0.5196152, 0.69… #> $ c_y        <dbl> -0.15, 0.15, 0.15, 0.45, 0.45, 0.75, 1.05, 1.35, 1.35, 1.65 #> $ std_counts <dbl> 0.2352941, 0.5294118, 0.4117647, 0.1764706, 0.3529412, 0.70…"},{"path":"/articles/algomain.html","id":"remove-low-density-hexagons","dir":"Articles","previous_headings":"Constructing the model in the 2D space","what":"3. Remove low-density hexagons","title":"1. Main steps","text":"","code":"## To identify low density hexagons df_bin_centroids_low <- df_bin_centroids |>   dplyr::filter(std_counts <= 0.25)  ## To identify low-density hexagons needed to remove by investigating neighbouring mean density identify_rm_bins <- find_low_density_hexagons(df_bin_centroids_all = df_bin_centroids,                                               num_bins_x = num_bins_x,                                               df_bin_centroids_low = df_bin_centroids_low)  ## To remove low-density hexagons df_bin_centroids <- df_bin_centroids |>   dplyr::filter(!(hexID %in% identify_rm_bins))"},{"path":"/articles/algomain.html","id":"triangulate-hexagonal-bin-centroids","dir":"Articles","previous_headings":"Constructing the model in the 2D space","what":"4. Triangulate hexagonal bin centroids","title":"1. Main steps","text":"Next, need perform triangulation bin centroids construct triangular mesh. Triangulation involves connecting bin centroids triangular edges form mesh reveals local structure data.","code":"tr1_object <- triangulate_bin_centroids(hex_bin_df = df_bin_centroids, x = \"c_x\", y = \"c_y\") str(tr1_object) #> List of 10 #>  $ n    : int 10 #>  $ x    : num [1:10] 0.173 0 0.346 0.173 0.52 ... #>  $ y    : num [1:10] -0.15 0.15 0.15 0.45 0.45 0.75 1.05 1.35 1.35 1.65 #>  $ tlist: int [1:48] 3 -2 1 3 2 1 -4 4 2 3 ... #>  $ tlptr: int [1:48] 2 24 4 7 6 12 3 5 10 11 ... #>  $ tlend: int [1:10] 2 7 6 29 16 20 28 37 36 40 #>  $ tlnew: int 41 #>  $ nc   : num 0 #>  $ lc   : num 0 #>  $ call : language tripack::tri.mesh(x = hex_bin_df[[rlang::as_string(rlang::sym(x))]], y = hex_bin_df[[rlang::as_string(rlang::sym(y))]]) #>  - attr(*, \"class\")= chr \"tri\"  tr_from_to_df <- generate_edge_info(triangular_object = tr1_object) tr_from_to_df #> # A tibble: 20 × 6 #>     from    to x_from y_from  x_to  y_to #>    <int> <int>  <dbl>  <dbl> <dbl> <dbl> #>  1     1     7  0.173  -0.15 0.866  1.05 #>  2     1     5  0.173  -0.15 0.520  0.45 #>  3     1     3  0.173  -0.15 0.346  0.15 #>  4     2     3  0       0.15 0.346  0.15 #>  5     3     5  0.346   0.15 0.520  0.45 #>  6     4     5  0.173   0.45 0.520  0.45 #>  7     4     6  0.173   0.45 0.693  0.75 #>  8     5     7  0.520   0.45 0.866  1.05 #>  9     6     7  0.693   0.75 0.866  1.05 #> 10     7     9  0.866   1.05 1.04   1.35 #> 11     8     9  0.693   1.35 1.04   1.35 #> 12     1     2  0.173  -0.15 0      0.15 #> 13     2     4  0       0.15 0.173  0.45 #> 14     3     4  0.346   0.15 0.173  0.45 #> 15     4     8  0.173   0.45 0.693  1.35 #> 16     5     6  0.520   0.45 0.693  0.75 #> 17     6     8  0.693   0.75 0.693  1.35 #> 18     7     8  0.866   1.05 0.693  1.35 #> 19     8    10  0.693   1.35 0.866  1.65 #> 20     9    10  1.04    1.35 0.866  1.65 ## To draw the traingular mesh  trimesh <- ggplot(df_bin_centroids, aes(x = c_x, y = c_y)) +   geom_trimesh() +   coord_equal() +   xlab(expression(C[x]^{(2)})) + ylab(expression(C[y]^{(2)})) +   theme(axis.text = element_text(size = 5),         axis.title = element_text(size = 7))  trimesh"},{"path":"/articles/algomain.html","id":"remove-long-edges","dir":"Articles","previous_headings":"Constructing the model in the 2D space","what":"5. Remove long edges","title":"1. Main steps","text":"","code":"## Compute 2D distances distance_df <- cal_2d_dist(tr_from_to_df_coord = tr_from_to_df, start_x = \"x_from\",                          start_y = \"y_from\", end_x = \"x_to\", end_y = \"y_to\",                          select_col_vec = c(\"from\", \"to\", \"distance\"))  ## To find the benchmark value to remove long edges benchmark <- find_benchmark_value(distance_edges = distance_df, distance_col = \"distance\") benchmark #> [1] 0.6 ## To draw the traingular mesh after remove long edges in 2D  trimesh_removed <- remove_long_edges(distance_edges = distance_df,                                       benchmark_value = 0.75,                                       tr_from_to_df_coord = tr_from_to_df,                                       distance_col = \"distance\") +   xlab(expression(C[x]^{(2)})) + ylab(expression(C[y]^{(2)})) +   theme(axis.text = element_text(size = 5),         axis.title = element_text(size = 7))  trimesh_removed"},{"path":"/articles/algomain.html","id":"lifting-the-model-into-high-dimensions","dir":"Articles","previous_headings":"","what":"Lifting the model into high dimensions","title":"1. Main steps","text":"extend model created 2D space higher dimensions, need take average high-dimensional coordinates within hexagonal bins.","code":"## Add hexbin Ids for the 2D embeddings umap_data_with_hb_id <- as.data.frame(do.call(cbind, hb_obj$nldr_data_with_hex_id)) umap_data_with_hb_id #>         UMAP1       UMAP2 hb_id #> 1  0.08044271 0.274498327     6 #> 2  0.73857864 0.859778569    18 #> 3  0.83992020 0.929412446    24 #> 4  0.16719939 0.037066861     2 #> 5  0.26292782 0.341734583    12 #> 6  0.83820653 1.720961652    34 #> 7  0.73364820 0.833935370    18 #> 8  0.62693057 0.618409921    18 #> 9  0.80998347 0.868291303    18 #> 10 0.90342138 1.600664528    34 #> 11 0.64241759 0.631646064    18 #> 12 0.05182936 0.320865388    12 #> 13 0.96228699 1.546732900    34 #> 14 0.07223295 0.218331864     6 #> 15 0.64916340 0.593427000    18 #> 16 0.80783543 1.374772146    28 #> 17 0.13518498 0.335559538    12 #> 18 0.80668446 1.381019256    28 #> 19 0.60311661 0.597381477    13 #> 20 0.16150976 0.009905107     2 #> 21 0.71326033 0.797282390    18 #> 22 0.09405763 0.058760856     6 #> 23 0.08900367 0.252258947     6 #> 24 0.77510396 1.730112607    34 #> 25 0.79296306 1.100876246    24 #> 26 0.28575187 0.202379969     7 #> 27 0.46806684 0.482713207    13 #> 28 0.57541142 0.708486670    18 #> 29 0.21053454 0.151933039     7 #> 30 0.62412077 0.712391079    18 #> 31 0.76738169 1.018811832    24 #> 32 0.76427076 1.552630670    34 #> 33 0.64842247 0.661926514    18 #> 34 0.03170275 0.303630086     6 #> 35 0.96450414 1.665355817    34 #> 36 0.10117880 0.050909321     6 #> 37 0.71265285 1.539719959    34 #> 38 0.82904448 1.722765733    34 #> 39 0.81275032 1.732050808    34 #> 40 0.00000000 0.271778584     6 #> 41 0.38392618 0.390190144    13 #> 42 0.82638316 1.011632238    24 #> 43 0.29256853 0.138015108     7 #> 44 0.84482412 0.983163036    24 #> 45 0.79995094 0.964486583    24 #> 46 0.69339205 1.448210796    28 #> 47 0.13459287 0.000000000     2 #> 48 0.04209521 0.257916294     6 #> 49 0.94245034 1.680924200    34 #> 50 0.05349536 0.187982579     6 #> 51 0.68677026 0.778563498    18 #> 52 0.77828853 0.839937252    18 #> 53 0.75504949 1.670893354    34 #> 54 0.23125328 0.061042472     7 #> 55 0.76831122 1.497157149    28 #> 56 0.69843891 1.621642749    34 #> 57 0.72681720 0.931757885    24 #> 58 0.99318862 1.521102615    29 #> 59 0.96227596 1.546125959    34 #> 60 0.39315580 0.328235991    13 #> 61 0.74175661 1.681926517    34 #> 62 0.94650462 1.524113512    34 #> 63 0.50932690 0.617404710    13 #> 64 1.00000000 1.625538768    34 #> 65 0.33548077 0.278688714     7 #> 66 0.25450458 0.063074584     7 #> 67 0.88588122 1.408512652    29 #> 68 0.72192354 0.952956061    24 #> 69 0.68029522 1.508729997    28 #> 70 0.92537063 1.455380663    29 #> 71 0.80964667 1.529334517    34 #> 72 0.49582819 0.604985028    13 #> 73 0.16301062 0.030266486     2 #> 74 0.29499615 0.117297635     7 #> 75 0.91053035 1.445460921    29          ## To generate a data set with high-dimensional training data and 2D embeddings with hexagonal IDs df_all <- dplyr::bind_cols(s_curve_noise_training |> dplyr::select(-ID), umap_data_with_hb_id) df_all #> # A tibble: 75 × 10 #>         x1     x2        x3       x4        x5       x6        x7  UMAP1  UMAP2 #>      <dbl>  <dbl>     <dbl>    <dbl>     <dbl>    <dbl>     <dbl>  <dbl>  <dbl> #>  1 -0.120  0.114  -1.99     -0.00246 -0.0178   -0.0181  -0.00317  0.0804 0.274  #>  2 -0.0492 0.822   0.00121   0.0161   0.00968  -0.0834   0.00230  0.739  0.860  #>  3 -0.774  0.243   0.367    -0.0198   0.00408  -0.0349  -0.00911  0.840  0.929  #>  4 -0.606  1.96   -1.80      0.0132  -0.000479 -0.00478 -0.00843  0.167  0.0371 #>  5  0.818  0.0388 -1.58      0.00253  0.00167   0.0781  -0.00771  0.263  0.342  #>  6  0.910  1.55    1.42      0.0124   0.0160   -0.00248 -0.00832  0.838  1.72   #>  7 -0.0691 0.978   0.00239   0.0115   0.00350   0.0898   0.00359  0.734  0.834  #>  8  0.859  1.55   -0.488    -0.00753 -0.0123    0.0336  -0.00665  0.627  0.618  #>  9 -0.0400 0.286   0.000801  0.0123   0.00613  -0.0121  -0.000347 0.810  0.868  #> 10  0.765  0.898   1.64     -0.0178   0.0151   -0.0710  -0.00624  0.903  1.60   #> # ℹ 65 more rows #> # ℹ 1 more variable: hb_id <dbl>  df_bin <- avg_highD_data(.data = df_all) df_bin #> # A tibble: 10 × 8 #>    hb_id       x1     x2     x3        x4        x5       x6        x7 #>    <dbl>    <dbl>  <dbl>  <dbl>     <dbl>     <dbl>    <dbl>     <dbl> #>  1     2 -0.637   1.74   -1.76   0.00953  -0.00143  -0.0117  -0.00152  #>  2     6 -0.498   0.524  -1.73  -0.000237  0.00234  -0.0297  -0.000242 #>  3     7  0.294   1.40   -1.88   0.00890  -0.00803  -0.0123  -0.00120  #>  4    12  0.309   0.0421 -1.83   0.00656   0.00823   0.00489 -0.00389  #>  5    13  0.868   0.747  -0.781 -0.00408   0.000857  0.0248   0.00170  #>  6    18  0.357   1.27   -0.169  0.00607   0.00124   0.0152   0.00204  #>  7    24 -0.792   1.25    0.514 -0.000777  0.000464  0.00602  0.000371 #>  8    28 -0.597   1.19    1.77   0.000240 -0.00417  -0.0185  -0.000786 #>  9    29 -0.00544 0.211   1.92   0.00116   0.00266   0.00949 -0.00209  #> 10    34  0.622   1.21    1.64  -0.000560  0.00540  -0.00741 -0.000886"},{"path":"/articles/algomain.html","id":"visualize-the-model-and-high-dimensional-data-in-the-high-dimensional-space","dir":"Articles","previous_headings":"","what":"Visualize the model and high-dimensional data in the high-dimensional space","title":"1. Main steps","text":"visualize model high-dimensional data, tour technique used.","code":"tour1 <- show_langevitour(df = df_all, df_b = df_bin,                            df_b_with_center_data = df_bin_centroids,                            benchmark_value = 0.75,                            distance_df = distance_df, distance_col = \"distance\",                            use_default_benchmark_val = FALSE, column_start_text = \"x\") tour1"},{"path":[]},{"path":[]},{"path":"/articles/quollr1algomain.html","id":"number-of-bins-along-the-x-axis","dir":"Articles","previous_headings":"Constructing the model in the 2D space > 1. Compute hexagonal grid configurations","what":"Number of bins along the x-axis","title":"1. Main steps","text":"begin algorithm, need determine number bins along x-axis creating regular hexagons hexagonal grid.","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled,                                          x = \"UMAP1\", hex_size = 0.2) num_bins_x  #> [1] 5"},{"path":"/articles/quollr1algomain.html","id":"number-of-bins-along-the-y-axis","dir":"Articles","previous_headings":"Constructing the model in the 2D space > 1. Compute hexagonal grid configurations","what":"Number of bins along the y-axis","title":"1. Main steps","text":", need determine shape parameter, control shape size hexagons hexagonal grid.","code":"num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,                                          y = \"UMAP2\", hex_size = 0.2) num_bins_y  #> [1] 8"},{"path":"/articles/quollr1algomain.html","id":"obtain-hexagonal-bin-centroids","dir":"Articles","previous_headings":"Constructing the model in the 2D space","what":"2. Obtain hexagonal bin centroids","title":"1. Main steps","text":"","code":"hb_obj <- generate_hex_binning_info(nldr_df = s_curve_noise_umap_scaled,                             x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x,                             num_bins_y = num_bins_y, x_start = NA,                             y_start = NA, buffer_x = NA,                             buffer_y = NA, hex_size = 0.2)  all_centroids_df <- as.data.frame(do.call(cbind, hb_obj$full_grid_hex_centroids)) counts_df <- as.data.frame(do.call(cbind, hb_obj$hex_id_with_std_counts))  df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df,                                               counts_df = counts_df) glimpse(df_bin_centroids)  #> Rows: 12 #> Columns: 4 #> $ hexID      <dbl> 1, 2, 6, 7, 12, 13, 18, 23, 27, 28, 33, 34 #> $ c_x        <dbl> 0.0000000, 0.3464102, 0.1732051, 0.5196152, 0.3464102, 0.69… #> $ c_y        <dbl> 0.0, 0.0, 0.3, 0.3, 0.6, 0.6, 0.9, 1.2, 1.5, 1.5, 1.8, 1.8 #> $ std_counts <dbl> 0.40000000, 0.26666667, 0.86666667, 0.13333333, 0.20000000,…"},{"path":"/articles/quollr1algomain.html","id":"remove-low-density-hexagons","dir":"Articles","previous_headings":"Constructing the model in the 2D space","what":"3. Remove low-density hexagons","title":"1. Main steps","text":"","code":"## To identify low density hexagons df_bin_centroids_low <- df_bin_centroids |>   dplyr::filter(std_counts <= 0.25)  ## To identify low-density hexagons needed to remove by investigating neighbouring mean density identify_rm_bins <- find_low_density_hexagons(df_bin_centroids_all = df_bin_centroids,                                               num_bins_x = num_bins_x,                                               df_bin_centroids_low = df_bin_centroids_low)  ## To remove low-density hexagons df_bin_centroids <- df_bin_centroids |>   dplyr::filter(!(hexID %in% identify_rm_bins))"},{"path":"/articles/quollr1algomain.html","id":"triangulate-hexagonal-bin-centroids","dir":"Articles","previous_headings":"Constructing the model in the 2D space","what":"4. Triangulate hexagonal bin centroids","title":"1. Main steps","text":"Next, need perform triangulation bin centroids construct triangular mesh. Triangulation involves connecting bin centroids triangular edges form mesh reveals local structure data.","code":"tr1_object <- triangulate_bin_centroids(hex_bin_df = df_bin_centroids, x = \"c_x\", y = \"c_y\") str(tr1_object) #> List of 10 #>  $ n    : int 12 #>  $ x    : num [1:12] 0 0.346 0.173 0.52 0.346 ... #>  $ y    : num [1:12] 0 0 0.3 0.3 0.6 0.6 0.9 1.2 1.5 1.5 ... #>  $ tlist: int [1:60] 2 3 3 -1 1 2 4 4 3 -2 ... #>  $ tlptr: int [1:60] 2 27 4 8 6 7 11 3 10 16 ... #>  $ tlend: int [1:12] 27 4 11 10 23 18 22 26 41 40 ... #>  $ tlnew: int 51 #>  $ nc   : num 0 #>  $ lc   : num 0 #>  $ call : language tripack::tri.mesh(x = hex_bin_df[[rlang::as_string(rlang::sym(x))]], y = hex_bin_df[[rlang::as_string(rlang::sym(y))]]) #>  - attr(*, \"class\")= chr \"tri\"  tr_from_to_df <- generate_edge_info(triangular_object = tr1_object) tr_from_to_df #> # A tibble: 25 × 6 #>     from    to x_from y_from  x_to  y_to #>    <int> <int>  <dbl>  <dbl> <dbl> <dbl> #>  1     1     2  0        0   0.346   0   #>  2     1     3  0        0   0.173   0.3 #>  3     2     4  0.346    0   0.520   0.3 #>  4     3     4  0.173    0.3 0.520   0.3 #>  5     3     5  0.173    0.3 0.346   0.6 #>  6     4     6  0.520    0.3 0.693   0.6 #>  7     5     6  0.346    0.6 0.693   0.6 #>  8     5     7  0.346    0.6 0.866   0.9 #>  9     5     8  0.346    0.6 0.693   1.2 #> 10     7    12  0.866    0.9 1.04    1.8 #> # ℹ 15 more rows ## To draw the traingular mesh  trimesh <- ggplot(df_bin_centroids, aes(x = c_x, y = c_y)) +   geom_trimesh() +   coord_equal() +   xlab(expression(C[x]^{(2)})) + ylab(expression(C[y]^{(2)})) +   theme(axis.text = element_text(size = 5),         axis.title = element_text(size = 7))  trimesh"},{"path":"/articles/quollr1algomain.html","id":"remove-long-edges","dir":"Articles","previous_headings":"Constructing the model in the 2D space","what":"5. Remove long edges","title":"1. Main steps","text":"","code":"## Compute 2D distances distance_df <- cal_2d_dist(tr_from_to_df_coord = tr_from_to_df, start_x = \"x_from\",                          start_y = \"y_from\", end_x = \"x_to\", end_y = \"y_to\",                          select_col_vec = c(\"from\", \"to\", \"distance\"))  ## To find the benchmark value to remove long edges benchmark <- find_benchmark_value(distance_edges = distance_df, distance_col = \"distance\") benchmark #> [1] 0.6 ## To draw the traingular mesh after remove long edges in 2D  trimesh_removed <- remove_long_edges(distance_edges = distance_df,                                       benchmark_value = 0.75,                                       tr_from_to_df_coord = tr_from_to_df,                                       distance_col = \"distance\") +   xlab(expression(C[x]^{(2)})) + ylab(expression(C[y]^{(2)})) +   theme(axis.text = element_text(size = 5),         axis.title = element_text(size = 7))  trimesh_removed"},{"path":"/articles/quollr1algomain.html","id":"lifting-the-model-into-high-dimensions","dir":"Articles","previous_headings":"","what":"Lifting the model into high dimensions","title":"1. Main steps","text":"extend model created 2D space higher dimensions, need take average high-dimensional coordinates within hexagonal bins.","code":"## Add hexbin Ids for the 2D embeddings umap_data_with_hb_id <- as.data.frame(do.call(cbind, hb_obj$nldr_data_with_hex_id)) umap_data_with_hb_id #>         UMAP1       UMAP2 hb_id #> 1  0.08044271 0.274498327     6 #> 2  0.73857864 0.859778569    18 #> 3  0.83992020 0.929412446    18 #> 4  0.16719939 0.037066861     1 #> 5  0.26292782 0.341734583     6 #> 6  0.83820653 1.720961652    33 #> 7  0.73364820 0.833935370    18 #> 8  0.62693057 0.618409921    13 #> 9  0.80998347 0.868291303    18 #> 10 0.90342138 1.600664528    28 #> 11 0.64241759 0.631646064    13 #> 12 0.05182936 0.320865388     6 #> 13 0.96228699 1.546732900    28 #> 14 0.07223295 0.218331864     6 #> 15 0.64916340 0.593427000    13 #> 16 0.80783543 1.374772146    28 #> 17 0.13518498 0.335559538     6 #> 18 0.80668446 1.381019256    28 #> 19 0.60311661 0.597381477    13 #> 20 0.16150976 0.009905107     1 #> 21 0.71326033 0.797282390    18 #> 22 0.09405763 0.058760856     1 #> 23 0.08900367 0.252258947     6 #> 24 0.77510396 1.730112607    33 #> 25 0.79296306 1.100876246    23 #> 26 0.28575187 0.202379969     6 #> 27 0.46806684 0.482713207    12 #> 28 0.57541142 0.708486670    13 #> 29 0.21053454 0.151933039     6 #> 30 0.62412077 0.712391079    13 #> 31 0.76738169 1.018811832    18 #> 32 0.76427076 1.552630670    28 #> 33 0.64842247 0.661926514    13 #> 34 0.03170275 0.303630086     6 #> 35 0.96450414 1.665355817    34 #> 36 0.10117880 0.050909321     1 #> 37 0.71265285 1.539719959    28 #> 38 0.82904448 1.722765733    33 #> 39 0.81275032 1.732050808    33 #> 40 0.00000000 0.271778584     6 #> 41 0.38392618 0.390190144     7 #> 42 0.82638316 1.011632238    18 #> 43 0.29256853 0.138015108     2 #> 44 0.84482412 0.983163036    18 #> 45 0.79995094 0.964486583    18 #> 46 0.69339205 1.448210796    28 #> 47 0.13459287 0.000000000     1 #> 48 0.04209521 0.257916294     6 #> 49 0.94245034 1.680924200    34 #> 50 0.05349536 0.187982579     6 #> 51 0.68677026 0.778563498    13 #> 52 0.77828853 0.839937252    18 #> 53 0.75504949 1.670893354    33 #> 54 0.23125328 0.061042472     2 #> 55 0.76831122 1.497157149    28 #> 56 0.69843891 1.621642749    33 #> 57 0.72681720 0.931757885    18 #> 58 0.99318862 1.521102615    28 #> 59 0.96227596 1.546125959    28 #> 60 0.39315580 0.328235991     7 #> 61 0.74175661 1.681926517    33 #> 62 0.94650462 1.524113512    28 #> 63 0.50932690 0.617404710    12 #> 64 1.00000000 1.625538768    34 #> 65 0.33548077 0.278688714     6 #> 66 0.25450458 0.063074584     2 #> 67 0.88588122 1.408512652    28 #> 68 0.72192354 0.952956061    18 #> 69 0.68029522 1.508729997    27 #> 70 0.92537063 1.455380663    28 #> 71 0.80964667 1.529334517    28 #> 72 0.49582819 0.604985028    12 #> 73 0.16301062 0.030266486     1 #> 74 0.29499615 0.117297635     2 #> 75 0.91053035 1.445460921    28          ## To generate a data set with high-dimensional training data and 2D embeddings with hexagonal IDs df_all <- dplyr::bind_cols(s_curve_noise_training |> dplyr::select(-ID), umap_data_with_hb_id) df_all #> # A tibble: 75 × 10 #>         x1     x2        x3       x4        x5       x6        x7  UMAP1  UMAP2 #>      <dbl>  <dbl>     <dbl>    <dbl>     <dbl>    <dbl>     <dbl>  <dbl>  <dbl> #>  1 -0.120  0.114  -1.99     -0.00246 -0.0178   -0.0181  -0.00317  0.0804 0.274  #>  2 -0.0492 0.822   0.00121   0.0161   0.00968  -0.0834   0.00230  0.739  0.860  #>  3 -0.774  0.243   0.367    -0.0198   0.00408  -0.0349  -0.00911  0.840  0.929  #>  4 -0.606  1.96   -1.80      0.0132  -0.000479 -0.00478 -0.00843  0.167  0.0371 #>  5  0.818  0.0388 -1.58      0.00253  0.00167   0.0781  -0.00771  0.263  0.342  #>  6  0.910  1.55    1.42      0.0124   0.0160   -0.00248 -0.00832  0.838  1.72   #>  7 -0.0691 0.978   0.00239   0.0115   0.00350   0.0898   0.00359  0.734  0.834  #>  8  0.859  1.55   -0.488    -0.00753 -0.0123    0.0336  -0.00665  0.627  0.618  #>  9 -0.0400 0.286   0.000801  0.0123   0.00613  -0.0121  -0.000347 0.810  0.868  #> 10  0.765  0.898   1.64     -0.0178   0.0151   -0.0710  -0.00624  0.903  1.60   #> # ℹ 65 more rows #> # ℹ 1 more variable: hb_id <dbl>  df_bin <- avg_highD_data(.data = df_all) df_bin #> # A tibble: 12 × 8 #>    hb_id      x1    x2     x3        x4        x5       x6        x7 #>    <dbl>   <dbl> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>     <dbl> #>  1     1 -0.753  1.62  -1.56   0.00687   0.00277  -0.0176  -0.000562 #>  2     2  0.213  1.67  -1.91   0.00714  -0.00672  -0.00213 -0.000491 #>  3     6 -0.0291 0.403 -1.87   0.00370  -0.000454 -0.0209  -0.00177  #>  4     7  0.943  0.757 -1.32  -0.00720  -0.00319   0.0572   0.00230  #>  5    12  0.799  0.527 -0.476  0.00328   0.00490  -0.00246 -0.000786 #>  6    13  0.660  1.51  -0.331 -0.000441  0.000757  0.0274   0.00201  #>  7    18 -0.452  1.07   0.246  0.00355   0.00165   0.00457  0.00121  #>  8    23 -0.988  1.64   1.16   0.00754  -0.0104   -0.00129  0.00489  #>  9    27 -0.557  1.52   1.83   0.00998   0.00198  -0.0936  -0.00417  #> 10    28  0.0233 0.749  1.84  -0.00276   0.00397  -0.00751 -0.00132  #> 11    33  0.689  1.74   1.64   0.00210   0.00370  -0.00532 -0.000634 #> 12    34  0.984  0.809  1.15   0.00437  -0.00191   0.0210   0.000373"},{"path":"/articles/quollr1algomain.html","id":"visualize-the-model-and-high-dimensional-data-in-the-high-dimensional-space","dir":"Articles","previous_headings":"","what":"Visualize the model and high-dimensional data in the high-dimensional space","title":"1. Main steps","text":"visualize model high-dimensional data, tour technique used.","code":"tour1 <- show_langevitour(df = df_all, df_b = df_bin,                            df_b_with_center_data = df_bin_centroids,                            benchmark_value = 0.75,                            distance_df = distance_df, distance_col = \"distance\",                            use_default_benchmark_val = FALSE, column_start_text = \"x\") tour1"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jayani P.G. Lakshika. Author, maintainer. Dianne Cook. Author. Paul Harrison. Author. Michael Lydeamore. Author. Thiyanga S. Talagala. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"P.G. Lakshika J, Cook D, Harrison P, Lydeamore M, S. Talagala T (2024). quollr: Visualising Nonlinear Dimension Reduction Warps Data. R package version 0.1.0, https://github.com/JayaniLakshika/quollr.","code":"@Manual{,   title = {quollr: Visualising How Nonlinear Dimension Reduction Warps Your Data},   author = {Jayani {P.G. Lakshika} and Dianne Cook and Paul Harrison and Michael Lydeamore and Thiyanga {S. Talagala}},   year = {2024},   note = {R package version 0.1.0},   url = {https://github.com/JayaniLakshika/quollr}, }"},{"path":"/index.html","id":"quollr","dir":"","previous_headings":"","what":"Visualising How Nonlinear Dimension Reduction Warps Your Data","title":"Visualising How Nonlinear Dimension Reduction Warps Your Data","text":"quollr package provide functions construct model 2D space based 2D embedding lifts high dimensional space. package also provides visualization integrates model high dimensional data using tour technique. thorough background discussion work, please read paper [link paper].","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visualising How Nonlinear Dimension Reduction Warps Your Data","text":"can install released version quollr CRAN : development version GitHub :","code":"# install.packages(\"quollr\") # install.packages(\"remotes\") # remotes::install_github(\"JayaniLakshika/quollr\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Visualising How Nonlinear Dimension Reduction Warps Your Data","text":"approach involves dividing high dimensional data set two parts: training set construct model test set generate predictive values residuals. implement approach, first use 2D embedding data set initial point. output algorithm tour displays model original high dimensional data high-dimensional space. algorithm comprises two main phases:(1) generate model 2D space, (2) generate model high-D space.","code":""},{"path":"/index.html","id":"about-the-name","dir":"","previous_headings":"","what":"About the name","title":"Visualising How Nonlinear Dimension Reduction Warps Your Data","text":"questioning high-dimensional object looks low-dimensions using r","code":""},{"path":"/index.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"Visualising How Nonlinear Dimension Reduction Warps Your Data","text":"learn basic steps algorithm: 1. Main steps create full hexagonal grid: 2. Visualise full hexagonal grid generate 2D embeddings test data: 3. Predict 2D embeddings","code":""},{"path":"/index.html","id":"copyright","dir":"","previous_headings":"","what":"Copyright","title":"Visualising How Nonlinear Dimension Reduction Warps Your Data","text":"package licensed MIT license.","code":""},{"path":"/reference/GeomTrimesh.html","id":null,"dir":"Reference","previous_headings":"","what":"GeomTrimesh: A Custom ggplot2 Geom for Triangular Meshes — GeomTrimesh","title":"GeomTrimesh: A Custom ggplot2 Geom for Triangular Meshes — GeomTrimesh","text":"function defines custom ggplot2 Geom, GeomTrimesh, rendering triangular meshes.","code":""},{"path":"/reference/GeomTrimesh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeomTrimesh: A Custom ggplot2 Geom for Triangular Meshes — GeomTrimesh","text":"","code":"GeomTrimesh"},{"path":"/reference/GeomTrimesh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"GeomTrimesh: A Custom ggplot2 Geom for Triangular Meshes — GeomTrimesh","text":"ggproto object","code":""},{"path":"/reference/GeomTrimesh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GeomTrimesh: A Custom ggplot2 Geom for Triangular Meshes — GeomTrimesh","text":"- required_aes: required aesthetics geometry \"x\", \"y\", \"xend\", \"yend\". - default_aes: default aesthetics geometry include shape = 19, linetype = 1, linewidth = 0.5,   size = 0.5, alpha = NA, colour = \"black\". - draw_key: function describing draw key glyph ggplot2::draw_key_point. - draw_panel: function describing draw panel takes data, panel_scales, coord.   creates tibble vertices tibble trimesh. final plot constructed using ggplot2::GeomPoint$draw_panel   vertices ggplot2::GeomSegment$draw_panel trimesh.","code":""},{"path":"/reference/assign_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Data To Hexagons — assign_data","title":"Assign Data To Hexagons — assign_data","text":"function generates coordinates hexagons passing hexagonal centroids.","code":""},{"path":"/reference/assign_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Data To Hexagons — assign_data","text":"","code":"assign_data(nldr_df, centroid_df, type_NLDR = \"UMAP\")"},{"path":"/reference/assign_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Data To Hexagons — assign_data","text":"nldr_df data frame containing 2D embeddings . centroid_df dataset centroid coordinates . type_NLDR type non-linear dimensionality reduction (NLDR) used. Default \"UMAP\".","code":""},{"path":"/reference/assign_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Data To Hexagons — assign_data","text":"list contains 2D embeddings respective hexagon ID (emb_1, emb_2, hb_id respectively).","code":""},{"path":"/reference/assign_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Data To Hexagons — assign_data","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,  y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. centroid_list <- generate_full_grid_centroids(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x, num_bins_y = num_bins_y, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. all_centroids_df <- as.data.frame(do.call(cbind, centroid_list)) s_curve_noise_umap_scaled_rm_id <- s_curve_noise_umap_scaled |> dplyr::select(-ID) assign_data(nldr_df = s_curve_noise_umap_scaled_rm_id, centroid_df = all_centroids_df) #> $UMAP1 #>  [1] 0.08044271 0.73857864 0.83992020 0.16719939 0.26292782 0.83820653 #>  [7] 0.73364820 0.62693057 0.80998347 0.90342138 0.64241759 0.05182936 #> [13] 0.96228699 0.07223295 0.64916340 0.80783543 0.13518498 0.80668446 #> [19] 0.60311661 0.16150976 0.71326033 0.09405763 0.08900367 0.77510396 #> [25] 0.79296306 0.28575187 0.46806684 0.57541142 0.21053454 0.62412077 #> [31] 0.76738169 0.76427076 0.64842247 0.03170275 0.96450414 0.10117880 #> [37] 0.71265285 0.82904448 0.81275032 0.00000000 0.38392618 0.82638316 #> [43] 0.29256853 0.84482412 0.79995094 0.69339205 0.13459287 0.04209521 #> [49] 0.94245034 0.05349536 0.68677026 0.77828853 0.75504949 0.23125328 #> [55] 0.76831122 0.69843891 0.72681720 0.99318862 0.96227596 0.39315580 #> [61] 0.74175661 0.94650462 0.50932690 1.00000000 0.33548077 0.25450458 #> [67] 0.88588122 0.72192354 0.68029522 0.92537063 0.80964667 0.49582819 #> [73] 0.16301062 0.29499615 0.91053035 #>  #> $UMAP2 #>  [1] 0.274498327 0.859778569 0.929412446 0.037066861 0.341734583 1.720961652 #>  [7] 0.833935370 0.618409921 0.868291303 1.600664528 0.631646064 0.320865388 #> [13] 1.546732900 0.218331864 0.593427000 1.374772146 0.335559538 1.381019256 #> [19] 0.597381477 0.009905107 0.797282390 0.058760856 0.252258947 1.730112607 #> [25] 1.100876246 0.202379969 0.482713207 0.708486670 0.151933039 0.712391079 #> [31] 1.018811832 1.552630670 0.661926514 0.303630086 1.665355817 0.050909321 #> [37] 1.539719959 1.722765733 1.732050808 0.271778584 0.390190144 1.011632238 #> [43] 0.138015108 0.983163036 0.964486583 1.448210796 0.000000000 0.257916294 #> [49] 1.680924200 0.187982579 0.778563498 0.839937252 1.670893354 0.061042472 #> [55] 1.497157149 1.621642749 0.931757885 1.521102615 1.546125959 0.328235991 #> [61] 1.681926517 1.524113512 0.617404710 1.625538768 0.278688714 0.063074584 #> [67] 1.408512652 0.952956061 1.508729997 1.455380663 1.529334517 0.604985028 #> [73] 0.030266486 0.117297635 1.445460921 #>  #> $hb_id #>  [1]  6 18 18  1  6 33 18 13 18 28 13  6 28  6 13 28  6 28 13  1 18  1  6 33 23 #> [26]  6 12 13  6 13 18 28 13  6 34  1 28 33 33  6  7 18  2 18 18 28  1  6 34  6 #> [51] 13 18 33  2 28 33 18 28 28  7 33 28 12 34  6  2 28 18 27 28 28 12  1  2 28 #>"},{"path":"/reference/avg_highD_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Average High-Dimensional Data — avg_highD_data","title":"Average High-Dimensional Data — avg_highD_data","text":"function calculates average values high-dimensional data within hexagonal bin.","code":""},{"path":"/reference/avg_highD_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average High-Dimensional Data — avg_highD_data","text":"","code":"avg_highD_data(.data, column_start_text = \"x\")"},{"path":"/reference/avg_highD_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average High-Dimensional Data — avg_highD_data","text":".data data frame containing high-dimensional data 2D embeddings hexagonal bin IDs. column_start_text text begin column name high-dimensional data","code":""},{"path":"/reference/avg_highD_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average High-Dimensional Data — avg_highD_data","text":"data frame average values high-dimensional data within hexagonal bin.","code":""},{"path":"/reference/avg_highD_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Average High-Dimensional Data — avg_highD_data","text":"","code":"training_data <- s_curve_noise_training num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,  y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. hex_bin_obj <- generate_hex_binning_info(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x, num_bins_y = num_bins_y, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. UMAP_data_with_hb_id <- hex_bin_obj$nldr_data_with_hex_id df_all <- dplyr::bind_cols(training_data |> dplyr::select(-ID), UMAP_data_with_hb_id) avg_highD_data(df_all, column_start_text = \"x\") #> # A tibble: 12 × 8 #>    hb_id      x1    x2     x3        x4        x5       x6        x7 #>    <dbl>   <dbl> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>     <dbl> #>  1     1 -0.753  1.62  -1.56   0.00687   0.00277  -0.0176  -0.000562 #>  2     2  0.213  1.67  -1.91   0.00714  -0.00672  -0.00213 -0.000491 #>  3     6 -0.0291 0.403 -1.87   0.00370  -0.000454 -0.0209  -0.00177  #>  4     7  0.943  0.757 -1.32  -0.00720  -0.00319   0.0572   0.00230  #>  5    12  0.799  0.527 -0.476  0.00328   0.00490  -0.00246 -0.000786 #>  6    13  0.660  1.51  -0.331 -0.000441  0.000757  0.0274   0.00201  #>  7    18 -0.452  1.07   0.246  0.00355   0.00165   0.00457  0.00121  #>  8    23 -0.988  1.64   1.16   0.00754  -0.0104   -0.00129  0.00489  #>  9    27 -0.557  1.52   1.83   0.00998   0.00198  -0.0936  -0.00417  #> 10    28  0.0233 0.749  1.84  -0.00276   0.00397  -0.00751 -0.00132  #> 11    33  0.689  1.74   1.64   0.00210   0.00370  -0.00532 -0.000634 #> 12    34  0.984  0.809  1.15   0.00437  -0.00191   0.0210   0.000373"},{"path":"/reference/cal_2D_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate 2D Distances Between Points — cal_2d_dist","title":"Calculate 2D Distances Between Points — cal_2d_dist","text":"function calculates 2D distances pairs points data frame.","code":""},{"path":"/reference/cal_2D_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate 2D Distances Between Points — cal_2d_dist","text":"","code":"cal_2d_dist(   tr_from_to_df_coord,   start_x = \"x_from\",   start_y = \"y_from\",   end_x = \"x_to\",   end_y = \"y_to\",   select_col_vec = c(\"from\", \"to\", \"distance\") )"},{"path":"/reference/cal_2D_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate 2D Distances Between Points — cal_2d_dist","text":"tr_from_to_df_coord data frame containing columns x y coordinates start end points. start_x Column name x-coordinate starting point. start_y Column name y-coordinate starting point. end_x Column name x-coordinate ending point. end_y Column name y-coordinate ending point. select_col_vec character vector specifying columns selected resulting data frame.","code":""},{"path":"/reference/cal_2D_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate 2D Distances Between Points — cal_2d_dist","text":"data frame columns starting point, ending point, calculated distances.","code":""},{"path":"/reference/cal_2D_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate 2D Distances Between Points — cal_2d_dist","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled,                                         x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,                                         y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. centroid_list <- generate_full_grid_centroids(nldr_df = s_curve_noise_umap_scaled,                                              x = \"UMAP1\", y = \"UMAP2\",                                              num_bins_x = num_bins_x,                                              num_bins_y = num_bins_y,                                              x_start = NA, y_start = NA,                                              buffer_x = NA,                                              buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. all_centroids_df <- as.data.frame(do.call(cbind, centroid_list)) s_curve_noise_umap_scaled_rm_id <- s_curve_noise_umap_scaled |> dplyr::select(-ID) nldr_with_hb_id_list <- assign_data(nldr_df = s_curve_noise_umap_scaled_rm_id, centroid_df = all_centroids_df) umap_with_hb_id <- as.data.frame(do.call(cbind, nldr_with_hb_id_list)) std_counts_list <- compute_std_counts(nldr_df_with_hex_id = umap_with_hb_id) counts_df <- as.data.frame(do.call(cbind, std_counts_list)) df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df, counts_df = counts_df) tr1_object <- triangulate_bin_centroids(hex_bin_df = df_bin_centroids, x = \"c_x\", y = \"c_y\") tr_from_to_df <- generate_edge_info(triangular_object = tr1_object) cal_2d_dist(tr_from_to_df_coord = tr_from_to_df, start_x = \"x_from\", start_y = \"y_from\", end_x = \"x_to\", end_y = \"y_to\", select_col_vec = c(\"from\", \"to\", \"distance\")) #> # A tibble: 25 × 3 #>     from    to distance #>    <int> <int>    <dbl> #>  1     1     2    0.346 #>  2     1     3    0.346 #>  3     2     4    0.346 #>  4     3     4    0.346 #>  5     3     5    0.346 #>  6     4     6    0.346 #>  7     5     6    0.346 #>  8     5     7    0.6   #>  9     5     8    0.693 #> 10     7    12    0.917 #> # ℹ 15 more rows"},{"path":"/reference/calculate_effective_shape_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate effective shape parameter value — calculate_effective_shape_value","title":"Calculate effective shape parameter value — calculate_effective_shape_value","text":"function calculates effective shape parameter value scatter plot based ranges x-axis y-axis.","code":""},{"path":"/reference/calculate_effective_shape_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate effective shape parameter value — calculate_effective_shape_value","text":"","code":"calculate_effective_shape_value(.data, x = \"UMAP1\", y = \"UMAP2\")"},{"path":"/reference/calculate_effective_shape_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate effective shape parameter value — calculate_effective_shape_value","text":".data data frame, data frame extension (e.g., tibble), lazy data frame (e.g., dbplyr dtplyr). x character variable name representing x-axis. y character variable name representing y-axis.","code":""},{"path":"/reference/calculate_effective_shape_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate effective shape parameter value — calculate_effective_shape_value","text":"numeric value representing effective shape parameter.","code":""},{"path":"/reference/calculate_effective_shape_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate effective shape parameter value — calculate_effective_shape_value","text":"","code":"calculate_effective_shape_value(.data = s_curve_noise_umap, x = \"UMAP1\", y = \"UMAP2\") #> [1] 2.019414"},{"path":"/reference/calculate_effective_x_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the effective number of bins along x-axis — calculate_effective_x_bins","title":"Calculate the effective number of bins along x-axis — calculate_effective_x_bins","text":"function calculates effective number bins along x-axis hexagonal grid.","code":""},{"path":"/reference/calculate_effective_x_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the effective number of bins along x-axis — calculate_effective_x_bins","text":"","code":"calculate_effective_x_bins(nldr_df, x = \"UMAP1\", hex_size = NA, buffer_x = NA)"},{"path":"/reference/calculate_effective_x_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the effective number of bins along x-axis — calculate_effective_x_bins","text":"nldr_df data frame containing 2D embeddings. x name column contains first 2D embeddings component. hex_size numeric value initializes radius outer circle surrounding hexagon. buffer_x buffer size along x-axis.","code":""},{"path":"/reference/calculate_effective_x_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the effective number of bins along x-axis — calculate_effective_x_bins","text":"numeric value representing effective number bins along x-axis.","code":""},{"path":"/reference/calculate_effective_x_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the effective number of bins along x-axis — calculate_effective_x_bins","text":"","code":"calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. #> [1] 5"},{"path":"/reference/calculate_effective_y_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the effective number of bins along y-axis — calculate_effective_y_bins","title":"Calculate the effective number of bins along y-axis — calculate_effective_y_bins","text":"function calculates effective number bins along y-axis hexagonal grid.","code":""},{"path":"/reference/calculate_effective_y_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the effective number of bins along y-axis — calculate_effective_y_bins","text":"","code":"calculate_effective_y_bins(nldr_df, y = \"UMAP2\", hex_size = NA, buffer_y = NA)"},{"path":"/reference/calculate_effective_y_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the effective number of bins along y-axis — calculate_effective_y_bins","text":"nldr_df data frame containing 2D embeddings. y name column contains second 2D embeddings component. hex_size numeric value initializes radius outer circle surrounding hexagon. buffer_y buffer size along y-axis.","code":""},{"path":"/reference/calculate_effective_y_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the effective number of bins along y-axis — calculate_effective_y_bins","text":"numeric value representing effective number bins along x-axis.","code":""},{"path":"/reference/calculate_effective_y_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the effective number of bins along y-axis — calculate_effective_y_bins","text":"","code":"calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled, y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. #> [1] 8"},{"path":"/reference/colour_long_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Long Edges — colour_long_edges","title":"Color Long Edges — colour_long_edges","text":"function colors long edges triangular mesh plot based benchmark value.","code":""},{"path":"/reference/colour_long_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Long Edges — colour_long_edges","text":"","code":"colour_long_edges(   distance_edges,   benchmark_value,   tr_from_to_df_coord,   distance_col )"},{"path":"/reference/colour_long_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color Long Edges — colour_long_edges","text":"distance_edges data frame containing edge information. benchmark_value threshold value determine long edges. tr_from_to_df_coord data frame containing columns x y coordinates start end points. distance_col column name `distance_edges` representing distances.","code":""},{"path":"/reference/colour_long_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color Long Edges — colour_long_edges","text":"ggplot object triangular mesh plot long edges colored differently.","code":""},{"path":"/reference/colour_long_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color Long Edges — colour_long_edges","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled,                                         x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,                                         y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. centroid_list <- generate_full_grid_centroids(nldr_df = s_curve_noise_umap_scaled,                                              x = \"UMAP1\", y = \"UMAP2\",                                              num_bins_x = num_bins_x,                                              num_bins_y = num_bins_y,                                              x_start = NA, y_start = NA,                                              buffer_x = NA,                                              buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. all_centroids_df <- as.data.frame(do.call(cbind, centroid_list)) s_curve_noise_umap_scaled_rm_id <- s_curve_noise_umap_scaled |> dplyr::select(-ID) nldr_with_hb_id_list <- assign_data(nldr_df = s_curve_noise_umap_scaled_rm_id, centroid_df = all_centroids_df) umap_with_hb_id <- as.data.frame(do.call(cbind, nldr_with_hb_id_list)) std_counts_list <- compute_std_counts(nldr_df_with_hex_id = umap_with_hb_id) counts_df <- as.data.frame(do.call(cbind, std_counts_list)) df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df, counts_df = counts_df) tr1_object <- triangulate_bin_centroids(hex_bin_df = df_bin_centroids, x = \"c_x\", y = \"c_y\") tr_from_to_df <- generate_edge_info(triangular_object = tr1_object) distance_df <- cal_2d_dist(tr_from_to_df_coord = tr_from_to_df, start_x = \"x_from\", start_y = \"y_from\", end_x = \"x_to\", end_y = \"y_to\", select_col_vec = c(\"from\", \"to\", \"distance\")) colour_long_edges(distance_edges = distance_df, benchmark_value = 0.75, tr_from_to_df_coord = tr_from_to_df, distance_col = \"distance\")"},{"path":"/reference/compute_aic.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Akaike Information Criterion (AIC) for a given model. — compute_aic","title":"Compute the Akaike Information Criterion (AIC) for a given model. — compute_aic","text":"Compute Akaike Information Criterion (AIC) given model.","code":""},{"path":"/reference/compute_aic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Akaike Information Criterion (AIC) for a given model. — compute_aic","text":"","code":"compute_aic(p, mse, num_bins, num_obs)"},{"path":"/reference/compute_aic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Akaike Information Criterion (AIC) for a given model. — compute_aic","text":"p Number dimensions data set. mse Mean squared error (MSE) model. num_bins Total number bins without empty bins used model. num_obs Total number observations training test set.","code":""},{"path":"/reference/compute_aic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Akaike Information Criterion (AIC) for a given model. — compute_aic","text":"AIC value specified model.","code":""},{"path":"/reference/compute_aic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Akaike Information Criterion (AIC) for a given model. — compute_aic","text":"","code":"# Example usage of compute_aic function p <- 5 mse <- 1500 num_bins <- 10 num_obs <- 100 aic_value <- compute_aic(p, mse, num_bins, num_obs) cat(\"AIC Value:\", aic_value, \"\\n\") #> AIC Value: 3756.61"},{"path":"/reference/compute_mean_density_hex.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Mean Density of Hexagonal Bins — compute_mean_density_hex","title":"Compute Mean Density of Hexagonal Bins — compute_mean_density_hex","text":"function calculates mean density hexagonal bins based neighboring bins.","code":""},{"path":"/reference/compute_mean_density_hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Mean Density of Hexagonal Bins — compute_mean_density_hex","text":"","code":"compute_mean_density_hex(df_bin_centroids, num_bins_x = NA)"},{"path":"/reference/compute_mean_density_hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Mean Density of Hexagonal Bins — compute_mean_density_hex","text":"df_bin_centroids data frame containing information hexagonal bin centroids, including hexagon ID standard normalized counts (std_counts). num_bins_x number bins along x-axis hexagonal grid.","code":""},{"path":"/reference/compute_mean_density_hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Mean Density of Hexagonal Bins — compute_mean_density_hex","text":"list contains hexagonal IDs mean density hexagonal bin based neighboring bins.","code":""},{"path":"/reference/compute_mean_density_hex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Mean Density of Hexagonal Bins — compute_mean_density_hex","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,  y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. hex_bin_obj <- generate_hex_binning_info(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x, num_bins_y = num_bins_y, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. all_centroids_df <- as.data.frame(do.call(cbind, hex_bin_obj$full_grid_hex_centroids)) counts_df <- as.data.frame(do.call(cbind, hex_bin_obj$hex_id_with_std_counts)) df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df, counts_df = counts_df) compute_mean_density_hex(df_bin_centroids, num_bins_x = num_bins_x) #> $hb_id #>  [1]  1  2  6  7 12 13 18 23 27 28 33 34 #>  #> $mean_density #>  [1] 0.4222222 0.2666667 0.2444444 0.4533333 0.5833333 0.3777778 0.2666667 #>  [8] 0.9000000 0.7333333 0.2000000 0.4222222 0.7333333 #>"},{"path":"/reference/compute_std_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Standardize Counts in Hexagons — compute_std_counts","title":"Compute Standardize Counts in Hexagons — compute_std_counts","text":"function computes standardize number points within hexagon.","code":""},{"path":"/reference/compute_std_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Standardize Counts in Hexagons — compute_std_counts","text":"","code":"compute_std_counts(nldr_df_with_hex_id)"},{"path":"/reference/compute_std_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Standardize Counts in Hexagons — compute_std_counts","text":"nldr_df_with_hex_id data frame 2D embeddings hexagonal bin IDs.","code":""},{"path":"/reference/compute_std_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Standardize Counts in Hexagons — compute_std_counts","text":"list contains hexagon IDs corresponding standardize counts.","code":""},{"path":"/reference/compute_std_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Standardize Counts in Hexagons — compute_std_counts","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled,                                         x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,                                         y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. centroid_list <- generate_full_grid_centroids(nldr_df = s_curve_noise_umap_scaled,                                              x = \"UMAP1\", y = \"UMAP2\",                                              num_bins_x = num_bins_x,                                              num_bins_y = num_bins_y,                                              x_start = NA, y_start = NA,                                              buffer_x = NA,                                              buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. all_centroids_df <- as.data.frame(do.call(cbind, centroid_list)) s_curve_noise_umap_scaled_rm_id <- s_curve_noise_umap_scaled |> dplyr::select(-ID) nldr_with_hb_id_list <- assign_data(nldr_df = s_curve_noise_umap_scaled_rm_id, centroid_df = all_centroids_df) umap_with_hb_id <- as.data.frame(do.call(cbind, nldr_with_hb_id_list)) compute_std_counts(nldr_df_with_hex_id = umap_with_hb_id) #> $hb_id #>  [1]  1  2  6  7 12 13 18 23 27 28 33 34 #>  #> $std_counts #>  [1] 0.40000000 0.26666667 0.86666667 0.13333333 0.20000000 0.53333333 #>  [7] 0.80000000 0.06666667 0.06666667 1.00000000 0.46666667 0.20000000 #>"},{"path":"/reference/compute_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Weights for Hexagonal Binning — compute_weights","title":"Compute Weights for Hexagonal Binning — compute_weights","text":"function computes weights hexagonal binning based average values bin distances averages.","code":""},{"path":"/reference/compute_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Weights for Hexagonal Binning — compute_weights","text":"","code":"compute_weights(nldr_df_with_hex_id)"},{"path":"/reference/compute_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Weights for Hexagonal Binning — compute_weights","text":"nldr_df_with_hex_id data frame 2D embeddings hexagonal bin IDs.","code":""},{"path":"/reference/compute_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Weights for Hexagonal Binning — compute_weights","text":"data frame weights calculated hexagonal bin.","code":""},{"path":"/reference/compute_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Weights for Hexagonal Binning — compute_weights","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,  y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. hex_bin_obj <- generate_hex_binning_info(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x, num_bins_y = num_bins_y, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. UMAP_data_with_hb_id <- as.data.frame(do.call(cbind, hex_bin_obj$nldr_data_with_hex_id)) compute_weights(nldr_df_with_hex_id = UMAP_data_with_hb_id) #> $hb_id #>   [1]  1  1  1  1  1  1  2  2  2  2  6  6  6  6  6  6  6  6  6  6  6  6  6  7  7 #>  [26] 12 12 12 13 13 13 13 13 13 13 13 18 18 18 18 18 18 18 18 18 18 18 18 23 27 #>  [51] 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 33 33 33 33 33 33 33 34 34 34 #>  [76]  1  1  1  1  1  1  2  2  2  2  6  6  6  6  6  6  6  6  6  6  6  6  6  7  7 #> [101] 12 12 12 13 13 13 13 13 13 13 13 18 18 18 18 18 18 18 18 18 18 18 18 23 27 #> [126] 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 33 33 33 33 33 33 33 34 34 34 #> [151]  1  1  1  1  1  1  2  2  2  2  6  6  6  6  6  6  6  6  6  6  6  6  6  7  7 #> [176] 12 12 12 13 13 13 13 13 13 13 13 18 18 18 18 18 18 18 18 18 18 18 18 23 27 #> [201] 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 33 33 33 33 33 33 33 34 34 34 #> [226]  1  1  1  1  1  1  2  2  2  2  6  6  6  6  6  6  6  6  6  6  6  6  6  7  7 #> [251] 12 12 12 13 13 13 13 13 13 13 13 18 18 18 18 18 18 18 18 18 18 18 18 23 27 #> [276] 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 33 33 33 33 33 33 33 34 34 34 #> [301]  1  1  1  1  1  1  2  2  2  2  6  6  6  6  6  6  6  6  6  6  6  6  6  7  7 #> [326] 12 12 12 13 13 13 13 13 13 13 13 18 18 18 18 18 18 18 18 18 18 18 18 23 27 #> [351] 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 33 33 33 33 33 33 33 34 34 34 #> [376]  1  1  1  1  1  1  2  2  2  2  6  6  6  6  6  6  6  6  6  6  6  6  6  7  7 #> [401] 12 12 12 13 13 13 13 13 13 13 13 18 18 18 18 18 18 18 18 18 18 18 18 23 27 #> [426] 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 33 33 33 33 33 33 33 34 34 34 #> [451]  1  1  1  1  1  1  2  2  2  2  6  6  6  6  6  6  6  6  6  6  6  6  6  7  7 #> [476] 12 12 12 13 13 13 13 13 13 13 13 18 18 18 18 18 18 18 18 18 18 18 18 23 27 #> [501] 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 33 33 33 33 33 33 33 34 34 34 #> [526]  1  1  1  1  1  1  2  2  2  2  6  6  6  6  6  6  6  6  6  6  6  6  6  7  7 #> [551] 12 12 12 13 13 13 13 13 13 13 13 18 18 18 18 18 18 18 18 18 18 18 18 23 27 #> [576] 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 33 33 33 33 33 33 33 34 34 34 #> [601]  1  1  1  1  1  1  2  2  2  2  6  6  6  6  6  6  6  6  6  6  6  6  6  7  7 #> [626] 12 12 12 13 13 13 13 13 13 13 13 18 18 18 18 18 18 18 18 18 18 18 18 23 27 #> [651] 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 33 33 33 33 33 33 33 34 34 34 #> [676]  1  1  1  1  1  1  2  2  2  2  6  6  6  6  6  6  6  6  6  6  6  6  6  7  7 #> [701] 12 12 12 13 13 13 13 13 13 13 13 18 18 18 18 18 18 18 18 18 18 18 18 23 27 #> [726] 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 33 33 33 33 33 33 33 34 34 34 #> [751]  1  1  1  1  1  1  2  2  2  2  6  6  6  6  6  6  6  6  6  6  6  6  6  7  7 #> [776] 12 12 12 13 13 13 13 13 13 13 13 18 18 18 18 18 18 18 18 18 18 18 18 23 27 #> [801] 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 33 33 33 33 33 33 33 34 34 34 #> [826]  1  1  1  1  1  1  2  2  2  2  6  6  6  6  6  6  6  6  6  6  6  6  6  7  7 #> [851] 12 12 12 13 13 13 13 13 13 13 13 18 18 18 18 18 18 18 18 18 18 18 18 23 27 #> [876] 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 33 33 33 33 33 33 33 34 34 34 #>  #> $UMAP1 #>   [1] 0.16719939 0.16150976 0.09405763 0.10117880 0.13459287 0.16301062 #>   [7] 0.29256853 0.23125328 0.25450458 0.29499615 0.08044271 0.26292782 #>  [13] 0.05182936 0.07223295 0.13518498 0.08900367 0.28575187 0.21053454 #>  [19] 0.03170275 0.00000000 0.04209521 0.05349536 0.33548077 0.38392618 #>  [25] 0.39315580 0.46806684 0.50932690 0.49582819 0.62693057 0.64241759 #>  [31] 0.64916340 0.60311661 0.57541142 0.62412077 0.64842247 0.68677026 #>  [37] 0.73857864 0.83992020 0.73364820 0.80998347 0.71326033 0.76738169 #>  [43] 0.82638316 0.84482412 0.79995094 0.77828853 0.72681720 0.72192354 #>  [49] 0.79296306 0.68029522 0.90342138 0.96228699 0.80783543 0.80668446 #>  [55] 0.76427076 0.71265285 0.69339205 0.76831122 0.99318862 0.96227596 #>  [61] 0.94650462 0.88588122 0.92537063 0.80964667 0.91053035 0.83820653 #>  [67] 0.77510396 0.82904448 0.81275032 0.75504949 0.69843891 0.74175661 #>  [73] 0.96450414 0.94245034 1.00000000 0.16719939 0.16150976 0.09405763 #>  [79] 0.10117880 0.13459287 0.16301062 0.29256853 0.23125328 0.25450458 #>  [85] 0.29499615 0.08044271 0.26292782 0.05182936 0.07223295 0.13518498 #>  [91] 0.08900367 0.28575187 0.21053454 0.03170275 0.00000000 0.04209521 #>  [97] 0.05349536 0.33548077 0.38392618 0.39315580 0.46806684 0.50932690 #> [103] 0.49582819 0.62693057 0.64241759 0.64916340 0.60311661 0.57541142 #> [109] 0.62412077 0.64842247 0.68677026 0.73857864 0.83992020 0.73364820 #> [115] 0.80998347 0.71326033 0.76738169 0.82638316 0.84482412 0.79995094 #> [121] 0.77828853 0.72681720 0.72192354 0.79296306 0.68029522 0.90342138 #> [127] 0.96228699 0.80783543 0.80668446 0.76427076 0.71265285 0.69339205 #> [133] 0.76831122 0.99318862 0.96227596 0.94650462 0.88588122 0.92537063 #> [139] 0.80964667 0.91053035 0.83820653 0.77510396 0.82904448 0.81275032 #> [145] 0.75504949 0.69843891 0.74175661 0.96450414 0.94245034 1.00000000 #> [151] 0.16719939 0.16150976 0.09405763 0.10117880 0.13459287 0.16301062 #> [157] 0.29256853 0.23125328 0.25450458 0.29499615 0.08044271 0.26292782 #> [163] 0.05182936 0.07223295 0.13518498 0.08900367 0.28575187 0.21053454 #> [169] 0.03170275 0.00000000 0.04209521 0.05349536 0.33548077 0.38392618 #> [175] 0.39315580 0.46806684 0.50932690 0.49582819 0.62693057 0.64241759 #> [181] 0.64916340 0.60311661 0.57541142 0.62412077 0.64842247 0.68677026 #> [187] 0.73857864 0.83992020 0.73364820 0.80998347 0.71326033 0.76738169 #> [193] 0.82638316 0.84482412 0.79995094 0.77828853 0.72681720 0.72192354 #> [199] 0.79296306 0.68029522 0.90342138 0.96228699 0.80783543 0.80668446 #> [205] 0.76427076 0.71265285 0.69339205 0.76831122 0.99318862 0.96227596 #> [211] 0.94650462 0.88588122 0.92537063 0.80964667 0.91053035 0.83820653 #> [217] 0.77510396 0.82904448 0.81275032 0.75504949 0.69843891 0.74175661 #> [223] 0.96450414 0.94245034 1.00000000 0.16719939 0.16150976 0.09405763 #> [229] 0.10117880 0.13459287 0.16301062 0.29256853 0.23125328 0.25450458 #> [235] 0.29499615 0.08044271 0.26292782 0.05182936 0.07223295 0.13518498 #> [241] 0.08900367 0.28575187 0.21053454 0.03170275 0.00000000 0.04209521 #> [247] 0.05349536 0.33548077 0.38392618 0.39315580 0.46806684 0.50932690 #> [253] 0.49582819 0.62693057 0.64241759 0.64916340 0.60311661 0.57541142 #> [259] 0.62412077 0.64842247 0.68677026 0.73857864 0.83992020 0.73364820 #> [265] 0.80998347 0.71326033 0.76738169 0.82638316 0.84482412 0.79995094 #> [271] 0.77828853 0.72681720 0.72192354 0.79296306 0.68029522 0.90342138 #> [277] 0.96228699 0.80783543 0.80668446 0.76427076 0.71265285 0.69339205 #> [283] 0.76831122 0.99318862 0.96227596 0.94650462 0.88588122 0.92537063 #> [289] 0.80964667 0.91053035 0.83820653 0.77510396 0.82904448 0.81275032 #> [295] 0.75504949 0.69843891 0.74175661 0.96450414 0.94245034 1.00000000 #> [301] 0.16719939 0.16150976 0.09405763 0.10117880 0.13459287 0.16301062 #> [307] 0.29256853 0.23125328 0.25450458 0.29499615 0.08044271 0.26292782 #> [313] 0.05182936 0.07223295 0.13518498 0.08900367 0.28575187 0.21053454 #> [319] 0.03170275 0.00000000 0.04209521 0.05349536 0.33548077 0.38392618 #> [325] 0.39315580 0.46806684 0.50932690 0.49582819 0.62693057 0.64241759 #> [331] 0.64916340 0.60311661 0.57541142 0.62412077 0.64842247 0.68677026 #> [337] 0.73857864 0.83992020 0.73364820 0.80998347 0.71326033 0.76738169 #> [343] 0.82638316 0.84482412 0.79995094 0.77828853 0.72681720 0.72192354 #> [349] 0.79296306 0.68029522 0.90342138 0.96228699 0.80783543 0.80668446 #> [355] 0.76427076 0.71265285 0.69339205 0.76831122 0.99318862 0.96227596 #> [361] 0.94650462 0.88588122 0.92537063 0.80964667 0.91053035 0.83820653 #> [367] 0.77510396 0.82904448 0.81275032 0.75504949 0.69843891 0.74175661 #> [373] 0.96450414 0.94245034 1.00000000 0.16719939 0.16150976 0.09405763 #> [379] 0.10117880 0.13459287 0.16301062 0.29256853 0.23125328 0.25450458 #> [385] 0.29499615 0.08044271 0.26292782 0.05182936 0.07223295 0.13518498 #> [391] 0.08900367 0.28575187 0.21053454 0.03170275 0.00000000 0.04209521 #> [397] 0.05349536 0.33548077 0.38392618 0.39315580 0.46806684 0.50932690 #> [403] 0.49582819 0.62693057 0.64241759 0.64916340 0.60311661 0.57541142 #> [409] 0.62412077 0.64842247 0.68677026 0.73857864 0.83992020 0.73364820 #> [415] 0.80998347 0.71326033 0.76738169 0.82638316 0.84482412 0.79995094 #> [421] 0.77828853 0.72681720 0.72192354 0.79296306 0.68029522 0.90342138 #> [427] 0.96228699 0.80783543 0.80668446 0.76427076 0.71265285 0.69339205 #> [433] 0.76831122 0.99318862 0.96227596 0.94650462 0.88588122 0.92537063 #> [439] 0.80964667 0.91053035 0.83820653 0.77510396 0.82904448 0.81275032 #> [445] 0.75504949 0.69843891 0.74175661 0.96450414 0.94245034 1.00000000 #> [451] 0.16719939 0.16150976 0.09405763 0.10117880 0.13459287 0.16301062 #> [457] 0.29256853 0.23125328 0.25450458 0.29499615 0.08044271 0.26292782 #> [463] 0.05182936 0.07223295 0.13518498 0.08900367 0.28575187 0.21053454 #> [469] 0.03170275 0.00000000 0.04209521 0.05349536 0.33548077 0.38392618 #> [475] 0.39315580 0.46806684 0.50932690 0.49582819 0.62693057 0.64241759 #> [481] 0.64916340 0.60311661 0.57541142 0.62412077 0.64842247 0.68677026 #> [487] 0.73857864 0.83992020 0.73364820 0.80998347 0.71326033 0.76738169 #> [493] 0.82638316 0.84482412 0.79995094 0.77828853 0.72681720 0.72192354 #> [499] 0.79296306 0.68029522 0.90342138 0.96228699 0.80783543 0.80668446 #> [505] 0.76427076 0.71265285 0.69339205 0.76831122 0.99318862 0.96227596 #> [511] 0.94650462 0.88588122 0.92537063 0.80964667 0.91053035 0.83820653 #> [517] 0.77510396 0.82904448 0.81275032 0.75504949 0.69843891 0.74175661 #> [523] 0.96450414 0.94245034 1.00000000 0.16719939 0.16150976 0.09405763 #> [529] 0.10117880 0.13459287 0.16301062 0.29256853 0.23125328 0.25450458 #> [535] 0.29499615 0.08044271 0.26292782 0.05182936 0.07223295 0.13518498 #> [541] 0.08900367 0.28575187 0.21053454 0.03170275 0.00000000 0.04209521 #> [547] 0.05349536 0.33548077 0.38392618 0.39315580 0.46806684 0.50932690 #> [553] 0.49582819 0.62693057 0.64241759 0.64916340 0.60311661 0.57541142 #> [559] 0.62412077 0.64842247 0.68677026 0.73857864 0.83992020 0.73364820 #> [565] 0.80998347 0.71326033 0.76738169 0.82638316 0.84482412 0.79995094 #> [571] 0.77828853 0.72681720 0.72192354 0.79296306 0.68029522 0.90342138 #> [577] 0.96228699 0.80783543 0.80668446 0.76427076 0.71265285 0.69339205 #> [583] 0.76831122 0.99318862 0.96227596 0.94650462 0.88588122 0.92537063 #> [589] 0.80964667 0.91053035 0.83820653 0.77510396 0.82904448 0.81275032 #> [595] 0.75504949 0.69843891 0.74175661 0.96450414 0.94245034 1.00000000 #> [601] 0.16719939 0.16150976 0.09405763 0.10117880 0.13459287 0.16301062 #> [607] 0.29256853 0.23125328 0.25450458 0.29499615 0.08044271 0.26292782 #> [613] 0.05182936 0.07223295 0.13518498 0.08900367 0.28575187 0.21053454 #> [619] 0.03170275 0.00000000 0.04209521 0.05349536 0.33548077 0.38392618 #> [625] 0.39315580 0.46806684 0.50932690 0.49582819 0.62693057 0.64241759 #> [631] 0.64916340 0.60311661 0.57541142 0.62412077 0.64842247 0.68677026 #> [637] 0.73857864 0.83992020 0.73364820 0.80998347 0.71326033 0.76738169 #> [643] 0.82638316 0.84482412 0.79995094 0.77828853 0.72681720 0.72192354 #> [649] 0.79296306 0.68029522 0.90342138 0.96228699 0.80783543 0.80668446 #> [655] 0.76427076 0.71265285 0.69339205 0.76831122 0.99318862 0.96227596 #> [661] 0.94650462 0.88588122 0.92537063 0.80964667 0.91053035 0.83820653 #> [667] 0.77510396 0.82904448 0.81275032 0.75504949 0.69843891 0.74175661 #> [673] 0.96450414 0.94245034 1.00000000 0.16719939 0.16150976 0.09405763 #> [679] 0.10117880 0.13459287 0.16301062 0.29256853 0.23125328 0.25450458 #> [685] 0.29499615 0.08044271 0.26292782 0.05182936 0.07223295 0.13518498 #> [691] 0.08900367 0.28575187 0.21053454 0.03170275 0.00000000 0.04209521 #> [697] 0.05349536 0.33548077 0.38392618 0.39315580 0.46806684 0.50932690 #> [703] 0.49582819 0.62693057 0.64241759 0.64916340 0.60311661 0.57541142 #> [709] 0.62412077 0.64842247 0.68677026 0.73857864 0.83992020 0.73364820 #> [715] 0.80998347 0.71326033 0.76738169 0.82638316 0.84482412 0.79995094 #> [721] 0.77828853 0.72681720 0.72192354 0.79296306 0.68029522 0.90342138 #> [727] 0.96228699 0.80783543 0.80668446 0.76427076 0.71265285 0.69339205 #> [733] 0.76831122 0.99318862 0.96227596 0.94650462 0.88588122 0.92537063 #> [739] 0.80964667 0.91053035 0.83820653 0.77510396 0.82904448 0.81275032 #> [745] 0.75504949 0.69843891 0.74175661 0.96450414 0.94245034 1.00000000 #> [751] 0.16719939 0.16150976 0.09405763 0.10117880 0.13459287 0.16301062 #> [757] 0.29256853 0.23125328 0.25450458 0.29499615 0.08044271 0.26292782 #> [763] 0.05182936 0.07223295 0.13518498 0.08900367 0.28575187 0.21053454 #> [769] 0.03170275 0.00000000 0.04209521 0.05349536 0.33548077 0.38392618 #> [775] 0.39315580 0.46806684 0.50932690 0.49582819 0.62693057 0.64241759 #> [781] 0.64916340 0.60311661 0.57541142 0.62412077 0.64842247 0.68677026 #> [787] 0.73857864 0.83992020 0.73364820 0.80998347 0.71326033 0.76738169 #> [793] 0.82638316 0.84482412 0.79995094 0.77828853 0.72681720 0.72192354 #> [799] 0.79296306 0.68029522 0.90342138 0.96228699 0.80783543 0.80668446 #> [805] 0.76427076 0.71265285 0.69339205 0.76831122 0.99318862 0.96227596 #> [811] 0.94650462 0.88588122 0.92537063 0.80964667 0.91053035 0.83820653 #> [817] 0.77510396 0.82904448 0.81275032 0.75504949 0.69843891 0.74175661 #> [823] 0.96450414 0.94245034 1.00000000 0.16719939 0.16150976 0.09405763 #> [829] 0.10117880 0.13459287 0.16301062 0.29256853 0.23125328 0.25450458 #> [835] 0.29499615 0.08044271 0.26292782 0.05182936 0.07223295 0.13518498 #> [841] 0.08900367 0.28575187 0.21053454 0.03170275 0.00000000 0.04209521 #> [847] 0.05349536 0.33548077 0.38392618 0.39315580 0.46806684 0.50932690 #> [853] 0.49582819 0.62693057 0.64241759 0.64916340 0.60311661 0.57541142 #> [859] 0.62412077 0.64842247 0.68677026 0.73857864 0.83992020 0.73364820 #> [865] 0.80998347 0.71326033 0.76738169 0.82638316 0.84482412 0.79995094 #> [871] 0.77828853 0.72681720 0.72192354 0.79296306 0.68029522 0.90342138 #> [877] 0.96228699 0.80783543 0.80668446 0.76427076 0.71265285 0.69339205 #> [883] 0.76831122 0.99318862 0.96227596 0.94650462 0.88588122 0.92537063 #> [889] 0.80964667 0.91053035 0.83820653 0.77510396 0.82904448 0.81275032 #> [895] 0.75504949 0.69843891 0.74175661 0.96450414 0.94245034 1.00000000 #>  #> $UMAP2 #>   [1] 0.037066861 0.009905107 0.058760856 0.050909321 0.000000000 0.030266486 #>   [7] 0.138015108 0.061042472 0.063074584 0.117297635 0.274498327 0.341734583 #>  [13] 0.320865388 0.218331864 0.335559538 0.252258947 0.202379969 0.151933039 #>  [19] 0.303630086 0.271778584 0.257916294 0.187982579 0.278688714 0.390190144 #>  [25] 0.328235991 0.482713207 0.617404710 0.604985028 0.618409921 0.631646064 #>  [31] 0.593427000 0.597381477 0.708486670 0.712391079 0.661926514 0.778563498 #>  [37] 0.859778569 0.929412446 0.833935370 0.868291303 0.797282390 1.018811832 #>  [43] 1.011632238 0.983163036 0.964486583 0.839937252 0.931757885 0.952956061 #>  [49] 1.100876246 1.508729997 1.600664528 1.546732900 1.374772146 1.381019256 #>  [55] 1.552630670 1.539719959 1.448210796 1.497157149 1.521102615 1.546125959 #>  [61] 1.524113512 1.408512652 1.455380663 1.529334517 1.445460921 1.720961652 #>  [67] 1.730112607 1.722765733 1.732050808 1.670893354 1.621642749 1.681926517 #>  [73] 1.665355817 1.680924200 1.625538768 0.037066861 0.009905107 0.058760856 #>  [79] 0.050909321 0.000000000 0.030266486 0.138015108 0.061042472 0.063074584 #>  [85] 0.117297635 0.274498327 0.341734583 0.320865388 0.218331864 0.335559538 #>  [91] 0.252258947 0.202379969 0.151933039 0.303630086 0.271778584 0.257916294 #>  [97] 0.187982579 0.278688714 0.390190144 0.328235991 0.482713207 0.617404710 #> [103] 0.604985028 0.618409921 0.631646064 0.593427000 0.597381477 0.708486670 #> [109] 0.712391079 0.661926514 0.778563498 0.859778569 0.929412446 0.833935370 #> [115] 0.868291303 0.797282390 1.018811832 1.011632238 0.983163036 0.964486583 #> [121] 0.839937252 0.931757885 0.952956061 1.100876246 1.508729997 1.600664528 #> [127] 1.546732900 1.374772146 1.381019256 1.552630670 1.539719959 1.448210796 #> [133] 1.497157149 1.521102615 1.546125959 1.524113512 1.408512652 1.455380663 #> [139] 1.529334517 1.445460921 1.720961652 1.730112607 1.722765733 1.732050808 #> [145] 1.670893354 1.621642749 1.681926517 1.665355817 1.680924200 1.625538768 #> [151] 0.037066861 0.009905107 0.058760856 0.050909321 0.000000000 0.030266486 #> [157] 0.138015108 0.061042472 0.063074584 0.117297635 0.274498327 0.341734583 #> [163] 0.320865388 0.218331864 0.335559538 0.252258947 0.202379969 0.151933039 #> [169] 0.303630086 0.271778584 0.257916294 0.187982579 0.278688714 0.390190144 #> [175] 0.328235991 0.482713207 0.617404710 0.604985028 0.618409921 0.631646064 #> [181] 0.593427000 0.597381477 0.708486670 0.712391079 0.661926514 0.778563498 #> [187] 0.859778569 0.929412446 0.833935370 0.868291303 0.797282390 1.018811832 #> [193] 1.011632238 0.983163036 0.964486583 0.839937252 0.931757885 0.952956061 #> [199] 1.100876246 1.508729997 1.600664528 1.546732900 1.374772146 1.381019256 #> [205] 1.552630670 1.539719959 1.448210796 1.497157149 1.521102615 1.546125959 #> [211] 1.524113512 1.408512652 1.455380663 1.529334517 1.445460921 1.720961652 #> [217] 1.730112607 1.722765733 1.732050808 1.670893354 1.621642749 1.681926517 #> [223] 1.665355817 1.680924200 1.625538768 0.037066861 0.009905107 0.058760856 #> [229] 0.050909321 0.000000000 0.030266486 0.138015108 0.061042472 0.063074584 #> [235] 0.117297635 0.274498327 0.341734583 0.320865388 0.218331864 0.335559538 #> [241] 0.252258947 0.202379969 0.151933039 0.303630086 0.271778584 0.257916294 #> [247] 0.187982579 0.278688714 0.390190144 0.328235991 0.482713207 0.617404710 #> [253] 0.604985028 0.618409921 0.631646064 0.593427000 0.597381477 0.708486670 #> [259] 0.712391079 0.661926514 0.778563498 0.859778569 0.929412446 0.833935370 #> [265] 0.868291303 0.797282390 1.018811832 1.011632238 0.983163036 0.964486583 #> [271] 0.839937252 0.931757885 0.952956061 1.100876246 1.508729997 1.600664528 #> [277] 1.546732900 1.374772146 1.381019256 1.552630670 1.539719959 1.448210796 #> [283] 1.497157149 1.521102615 1.546125959 1.524113512 1.408512652 1.455380663 #> [289] 1.529334517 1.445460921 1.720961652 1.730112607 1.722765733 1.732050808 #> [295] 1.670893354 1.621642749 1.681926517 1.665355817 1.680924200 1.625538768 #> [301] 0.037066861 0.009905107 0.058760856 0.050909321 0.000000000 0.030266486 #> [307] 0.138015108 0.061042472 0.063074584 0.117297635 0.274498327 0.341734583 #> [313] 0.320865388 0.218331864 0.335559538 0.252258947 0.202379969 0.151933039 #> [319] 0.303630086 0.271778584 0.257916294 0.187982579 0.278688714 0.390190144 #> [325] 0.328235991 0.482713207 0.617404710 0.604985028 0.618409921 0.631646064 #> [331] 0.593427000 0.597381477 0.708486670 0.712391079 0.661926514 0.778563498 #> [337] 0.859778569 0.929412446 0.833935370 0.868291303 0.797282390 1.018811832 #> [343] 1.011632238 0.983163036 0.964486583 0.839937252 0.931757885 0.952956061 #> [349] 1.100876246 1.508729997 1.600664528 1.546732900 1.374772146 1.381019256 #> [355] 1.552630670 1.539719959 1.448210796 1.497157149 1.521102615 1.546125959 #> [361] 1.524113512 1.408512652 1.455380663 1.529334517 1.445460921 1.720961652 #> [367] 1.730112607 1.722765733 1.732050808 1.670893354 1.621642749 1.681926517 #> [373] 1.665355817 1.680924200 1.625538768 0.037066861 0.009905107 0.058760856 #> [379] 0.050909321 0.000000000 0.030266486 0.138015108 0.061042472 0.063074584 #> [385] 0.117297635 0.274498327 0.341734583 0.320865388 0.218331864 0.335559538 #> [391] 0.252258947 0.202379969 0.151933039 0.303630086 0.271778584 0.257916294 #> [397] 0.187982579 0.278688714 0.390190144 0.328235991 0.482713207 0.617404710 #> [403] 0.604985028 0.618409921 0.631646064 0.593427000 0.597381477 0.708486670 #> [409] 0.712391079 0.661926514 0.778563498 0.859778569 0.929412446 0.833935370 #> [415] 0.868291303 0.797282390 1.018811832 1.011632238 0.983163036 0.964486583 #> [421] 0.839937252 0.931757885 0.952956061 1.100876246 1.508729997 1.600664528 #> [427] 1.546732900 1.374772146 1.381019256 1.552630670 1.539719959 1.448210796 #> [433] 1.497157149 1.521102615 1.546125959 1.524113512 1.408512652 1.455380663 #> [439] 1.529334517 1.445460921 1.720961652 1.730112607 1.722765733 1.732050808 #> [445] 1.670893354 1.621642749 1.681926517 1.665355817 1.680924200 1.625538768 #> [451] 0.037066861 0.009905107 0.058760856 0.050909321 0.000000000 0.030266486 #> [457] 0.138015108 0.061042472 0.063074584 0.117297635 0.274498327 0.341734583 #> [463] 0.320865388 0.218331864 0.335559538 0.252258947 0.202379969 0.151933039 #> [469] 0.303630086 0.271778584 0.257916294 0.187982579 0.278688714 0.390190144 #> [475] 0.328235991 0.482713207 0.617404710 0.604985028 0.618409921 0.631646064 #> [481] 0.593427000 0.597381477 0.708486670 0.712391079 0.661926514 0.778563498 #> [487] 0.859778569 0.929412446 0.833935370 0.868291303 0.797282390 1.018811832 #> [493] 1.011632238 0.983163036 0.964486583 0.839937252 0.931757885 0.952956061 #> [499] 1.100876246 1.508729997 1.600664528 1.546732900 1.374772146 1.381019256 #> [505] 1.552630670 1.539719959 1.448210796 1.497157149 1.521102615 1.546125959 #> [511] 1.524113512 1.408512652 1.455380663 1.529334517 1.445460921 1.720961652 #> [517] 1.730112607 1.722765733 1.732050808 1.670893354 1.621642749 1.681926517 #> [523] 1.665355817 1.680924200 1.625538768 0.037066861 0.009905107 0.058760856 #> [529] 0.050909321 0.000000000 0.030266486 0.138015108 0.061042472 0.063074584 #> [535] 0.117297635 0.274498327 0.341734583 0.320865388 0.218331864 0.335559538 #> [541] 0.252258947 0.202379969 0.151933039 0.303630086 0.271778584 0.257916294 #> [547] 0.187982579 0.278688714 0.390190144 0.328235991 0.482713207 0.617404710 #> [553] 0.604985028 0.618409921 0.631646064 0.593427000 0.597381477 0.708486670 #> [559] 0.712391079 0.661926514 0.778563498 0.859778569 0.929412446 0.833935370 #> [565] 0.868291303 0.797282390 1.018811832 1.011632238 0.983163036 0.964486583 #> [571] 0.839937252 0.931757885 0.952956061 1.100876246 1.508729997 1.600664528 #> [577] 1.546732900 1.374772146 1.381019256 1.552630670 1.539719959 1.448210796 #> [583] 1.497157149 1.521102615 1.546125959 1.524113512 1.408512652 1.455380663 #> [589] 1.529334517 1.445460921 1.720961652 1.730112607 1.722765733 1.732050808 #> [595] 1.670893354 1.621642749 1.681926517 1.665355817 1.680924200 1.625538768 #> [601] 0.037066861 0.009905107 0.058760856 0.050909321 0.000000000 0.030266486 #> [607] 0.138015108 0.061042472 0.063074584 0.117297635 0.274498327 0.341734583 #> [613] 0.320865388 0.218331864 0.335559538 0.252258947 0.202379969 0.151933039 #> [619] 0.303630086 0.271778584 0.257916294 0.187982579 0.278688714 0.390190144 #> [625] 0.328235991 0.482713207 0.617404710 0.604985028 0.618409921 0.631646064 #> [631] 0.593427000 0.597381477 0.708486670 0.712391079 0.661926514 0.778563498 #> [637] 0.859778569 0.929412446 0.833935370 0.868291303 0.797282390 1.018811832 #> [643] 1.011632238 0.983163036 0.964486583 0.839937252 0.931757885 0.952956061 #> [649] 1.100876246 1.508729997 1.600664528 1.546732900 1.374772146 1.381019256 #> [655] 1.552630670 1.539719959 1.448210796 1.497157149 1.521102615 1.546125959 #> [661] 1.524113512 1.408512652 1.455380663 1.529334517 1.445460921 1.720961652 #> [667] 1.730112607 1.722765733 1.732050808 1.670893354 1.621642749 1.681926517 #> [673] 1.665355817 1.680924200 1.625538768 0.037066861 0.009905107 0.058760856 #> [679] 0.050909321 0.000000000 0.030266486 0.138015108 0.061042472 0.063074584 #> [685] 0.117297635 0.274498327 0.341734583 0.320865388 0.218331864 0.335559538 #> [691] 0.252258947 0.202379969 0.151933039 0.303630086 0.271778584 0.257916294 #> [697] 0.187982579 0.278688714 0.390190144 0.328235991 0.482713207 0.617404710 #> [703] 0.604985028 0.618409921 0.631646064 0.593427000 0.597381477 0.708486670 #> [709] 0.712391079 0.661926514 0.778563498 0.859778569 0.929412446 0.833935370 #> [715] 0.868291303 0.797282390 1.018811832 1.011632238 0.983163036 0.964486583 #> [721] 0.839937252 0.931757885 0.952956061 1.100876246 1.508729997 1.600664528 #> [727] 1.546732900 1.374772146 1.381019256 1.552630670 1.539719959 1.448210796 #> [733] 1.497157149 1.521102615 1.546125959 1.524113512 1.408512652 1.455380663 #> [739] 1.529334517 1.445460921 1.720961652 1.730112607 1.722765733 1.732050808 #> [745] 1.670893354 1.621642749 1.681926517 1.665355817 1.680924200 1.625538768 #> [751] 0.037066861 0.009905107 0.058760856 0.050909321 0.000000000 0.030266486 #> [757] 0.138015108 0.061042472 0.063074584 0.117297635 0.274498327 0.341734583 #> [763] 0.320865388 0.218331864 0.335559538 0.252258947 0.202379969 0.151933039 #> [769] 0.303630086 0.271778584 0.257916294 0.187982579 0.278688714 0.390190144 #> [775] 0.328235991 0.482713207 0.617404710 0.604985028 0.618409921 0.631646064 #> [781] 0.593427000 0.597381477 0.708486670 0.712391079 0.661926514 0.778563498 #> [787] 0.859778569 0.929412446 0.833935370 0.868291303 0.797282390 1.018811832 #> [793] 1.011632238 0.983163036 0.964486583 0.839937252 0.931757885 0.952956061 #> [799] 1.100876246 1.508729997 1.600664528 1.546732900 1.374772146 1.381019256 #> [805] 1.552630670 1.539719959 1.448210796 1.497157149 1.521102615 1.546125959 #> [811] 1.524113512 1.408512652 1.455380663 1.529334517 1.445460921 1.720961652 #> [817] 1.730112607 1.722765733 1.732050808 1.670893354 1.621642749 1.681926517 #> [823] 1.665355817 1.680924200 1.625538768 0.037066861 0.009905107 0.058760856 #> [829] 0.050909321 0.000000000 0.030266486 0.138015108 0.061042472 0.063074584 #> [835] 0.117297635 0.274498327 0.341734583 0.320865388 0.218331864 0.335559538 #> [841] 0.252258947 0.202379969 0.151933039 0.303630086 0.271778584 0.257916294 #> [847] 0.187982579 0.278688714 0.390190144 0.328235991 0.482713207 0.617404710 #> [853] 0.604985028 0.618409921 0.631646064 0.593427000 0.597381477 0.708486670 #> [859] 0.712391079 0.661926514 0.778563498 0.859778569 0.929412446 0.833935370 #> [865] 0.868291303 0.797282390 1.018811832 1.011632238 0.983163036 0.964486583 #> [871] 0.839937252 0.931757885 0.952956061 1.100876246 1.508729997 1.600664528 #> [877] 1.546732900 1.374772146 1.381019256 1.552630670 1.539719959 1.448210796 #> [883] 1.497157149 1.521102615 1.546125959 1.524113512 1.408512652 1.455380663 #> [889] 1.529334517 1.445460921 1.720961652 1.730112607 1.722765733 1.732050808 #> [895] 1.670893354 1.621642749 1.681926517 1.665355817 1.680924200 1.625538768 #>  #> $weights #>   [1] 12.369036 12.122174  9.902068 11.007998 12.309419 13.140469 10.050446 #>   [8]  9.981883 11.811964 11.785327 10.167293  4.809112  6.855934  8.359596 #>  [15]  8.021714 11.230263  4.558431  5.328370  6.483709  5.636883  7.410164 #>  [22]  6.500370  3.857655 12.297259 12.297259  7.210297  9.772877 11.504207 #>  [29] 10.563811 12.075006  8.234947  8.229794  8.144866  9.975980 15.060127 #>  [36]  5.615884  8.547554  8.604203  7.047757  9.167929  5.440462  6.529727 #>  [43]  6.306557  6.809333  9.566230  7.931209  9.922158  8.713297 20.000000 #>  [50] 20.000000  5.924440  5.913467  5.665973  5.840162  6.212313  4.949328 #>  [57]  4.565493  7.210170  5.275101  5.923645  6.874316  7.255238  7.846925 #>  [64]  9.046988  8.286622  8.760349 12.032731  9.386415 10.123158 11.720920 #>  [71]  6.243418 11.123340 16.879992 11.689726 10.596207 12.369036 12.122174 #>  [78]  9.902068 11.007998 12.309419 13.140469 10.050446  9.981883 11.811964 #>  [85] 11.785327 10.167293  4.809112  6.855934  8.359596  8.021714 11.230263 #>  [92]  4.558431  5.328370  6.483709  5.636883  7.410164  6.500370  3.857655 #>  [99] 12.297259 12.297259  7.210297  9.772877 11.504207 10.563811 12.075006 #> [106]  8.234947  8.229794  8.144866  9.975980 15.060127  5.615884  8.547554 #> [113]  8.604203  7.047757  9.167929  5.440462  6.529727  6.306557  6.809333 #> [120]  9.566230  7.931209  9.922158  8.713297 20.000000 20.000000  5.924440 #> [127]  5.913467  5.665973  5.840162  6.212313  4.949328  4.565493  7.210170 #> [134]  5.275101  5.923645  6.874316  7.255238  7.846925  9.046988  8.286622 #> [141]  8.760349 12.032731  9.386415 10.123158 11.720920  6.243418 11.123340 #> [148] 16.879992 11.689726 10.596207 12.369036 12.122174  9.902068 11.007998 #> [155] 12.309419 13.140469 10.050446  9.981883 11.811964 11.785327 10.167293 #> [162]  4.809112  6.855934  8.359596  8.021714 11.230263  4.558431  5.328370 #> [169]  6.483709  5.636883  7.410164  6.500370  3.857655 12.297259 12.297259 #> [176]  7.210297  9.772877 11.504207 10.563811 12.075006  8.234947  8.229794 #> [183]  8.144866  9.975980 15.060127  5.615884  8.547554  8.604203  7.047757 #> [190]  9.167929  5.440462  6.529727  6.306557  6.809333  9.566230  7.931209 #> [197]  9.922158  8.713297 20.000000 20.000000  5.924440  5.913467  5.665973 #> [204]  5.840162  6.212313  4.949328  4.565493  7.210170  5.275101  5.923645 #> [211]  6.874316  7.255238  7.846925  9.046988  8.286622  8.760349 12.032731 #> [218]  9.386415 10.123158 11.720920  6.243418 11.123340 16.879992 11.689726 #> [225] 10.596207 12.369036 12.122174  9.902068 11.007998 12.309419 13.140469 #> [232] 10.050446  9.981883 11.811964 11.785327 10.167293  4.809112  6.855934 #> [239]  8.359596  8.021714 11.230263  4.558431  5.328370  6.483709  5.636883 #> [246]  7.410164  6.500370  3.857655 12.297259 12.297259  7.210297  9.772877 #> [253] 11.504207 10.563811 12.075006  8.234947  8.229794  8.144866  9.975980 #> [260] 15.060127  5.615884  8.547554  8.604203  7.047757  9.167929  5.440462 #> [267]  6.529727  6.306557  6.809333  9.566230  7.931209  9.922158  8.713297 #> [274] 20.000000 20.000000  5.924440  5.913467  5.665973  5.840162  6.212313 #> [281]  4.949328  4.565493  7.210170  5.275101  5.923645  6.874316  7.255238 #> [288]  7.846925  9.046988  8.286622  8.760349 12.032731  9.386415 10.123158 #> [295] 11.720920  6.243418 11.123340 16.879992 11.689726 10.596207 12.369036 #> [302] 12.122174  9.902068 11.007998 12.309419 13.140469 10.050446  9.981883 #> [309] 11.811964 11.785327 10.167293  4.809112  6.855934  8.359596  8.021714 #> [316] 11.230263  4.558431  5.328370  6.483709  5.636883  7.410164  6.500370 #> [323]  3.857655 12.297259 12.297259  7.210297  9.772877 11.504207 10.563811 #> [330] 12.075006  8.234947  8.229794  8.144866  9.975980 15.060127  5.615884 #> [337]  8.547554  8.604203  7.047757  9.167929  5.440462  6.529727  6.306557 #> [344]  6.809333  9.566230  7.931209  9.922158  8.713297 20.000000 20.000000 #> [351]  5.924440  5.913467  5.665973  5.840162  6.212313  4.949328  4.565493 #> [358]  7.210170  5.275101  5.923645  6.874316  7.255238  7.846925  9.046988 #> [365]  8.286622  8.760349 12.032731  9.386415 10.123158 11.720920  6.243418 #> [372] 11.123340 16.879992 11.689726 10.596207 12.369036 12.122174  9.902068 #> [379] 11.007998 12.309419 13.140469 10.050446  9.981883 11.811964 11.785327 #> [386] 10.167293  4.809112  6.855934  8.359596  8.021714 11.230263  4.558431 #> [393]  5.328370  6.483709  5.636883  7.410164  6.500370  3.857655 12.297259 #> [400] 12.297259  7.210297  9.772877 11.504207 10.563811 12.075006  8.234947 #> [407]  8.229794  8.144866  9.975980 15.060127  5.615884  8.547554  8.604203 #> [414]  7.047757  9.167929  5.440462  6.529727  6.306557  6.809333  9.566230 #> [421]  7.931209  9.922158  8.713297 20.000000 20.000000  5.924440  5.913467 #> [428]  5.665973  5.840162  6.212313  4.949328  4.565493  7.210170  5.275101 #> [435]  5.923645  6.874316  7.255238  7.846925  9.046988  8.286622  8.760349 #> [442] 12.032731  9.386415 10.123158 11.720920  6.243418 11.123340 16.879992 #> [449] 11.689726 10.596207 12.369036 12.122174  9.902068 11.007998 12.309419 #> [456] 13.140469 10.050446  9.981883 11.811964 11.785327 10.167293  4.809112 #> [463]  6.855934  8.359596  8.021714 11.230263  4.558431  5.328370  6.483709 #> [470]  5.636883  7.410164  6.500370  3.857655 12.297259 12.297259  7.210297 #> [477]  9.772877 11.504207 10.563811 12.075006  8.234947  8.229794  8.144866 #> [484]  9.975980 15.060127  5.615884  8.547554  8.604203  7.047757  9.167929 #> [491]  5.440462  6.529727  6.306557  6.809333  9.566230  7.931209  9.922158 #> [498]  8.713297 20.000000 20.000000  5.924440  5.913467  5.665973  5.840162 #> [505]  6.212313  4.949328  4.565493  7.210170  5.275101  5.923645  6.874316 #> [512]  7.255238  7.846925  9.046988  8.286622  8.760349 12.032731  9.386415 #> [519] 10.123158 11.720920  6.243418 11.123340 16.879992 11.689726 10.596207 #> [526] 12.369036 12.122174  9.902068 11.007998 12.309419 13.140469 10.050446 #> [533]  9.981883 11.811964 11.785327 10.167293  4.809112  6.855934  8.359596 #> [540]  8.021714 11.230263  4.558431  5.328370  6.483709  5.636883  7.410164 #> [547]  6.500370  3.857655 12.297259 12.297259  7.210297  9.772877 11.504207 #> [554] 10.563811 12.075006  8.234947  8.229794  8.144866  9.975980 15.060127 #> [561]  5.615884  8.547554  8.604203  7.047757  9.167929  5.440462  6.529727 #> [568]  6.306557  6.809333  9.566230  7.931209  9.922158  8.713297 20.000000 #> [575] 20.000000  5.924440  5.913467  5.665973  5.840162  6.212313  4.949328 #> [582]  4.565493  7.210170  5.275101  5.923645  6.874316  7.255238  7.846925 #> [589]  9.046988  8.286622  8.760349 12.032731  9.386415 10.123158 11.720920 #> [596]  6.243418 11.123340 16.879992 11.689726 10.596207 12.369036 12.122174 #> [603]  9.902068 11.007998 12.309419 13.140469 10.050446  9.981883 11.811964 #> [610] 11.785327 10.167293  4.809112  6.855934  8.359596  8.021714 11.230263 #> [617]  4.558431  5.328370  6.483709  5.636883  7.410164  6.500370  3.857655 #> [624] 12.297259 12.297259  7.210297  9.772877 11.504207 10.563811 12.075006 #> [631]  8.234947  8.229794  8.144866  9.975980 15.060127  5.615884  8.547554 #> [638]  8.604203  7.047757  9.167929  5.440462  6.529727  6.306557  6.809333 #> [645]  9.566230  7.931209  9.922158  8.713297 20.000000 20.000000  5.924440 #> [652]  5.913467  5.665973  5.840162  6.212313  4.949328  4.565493  7.210170 #> [659]  5.275101  5.923645  6.874316  7.255238  7.846925  9.046988  8.286622 #> [666]  8.760349 12.032731  9.386415 10.123158 11.720920  6.243418 11.123340 #> [673] 16.879992 11.689726 10.596207 12.369036 12.122174  9.902068 11.007998 #> [680] 12.309419 13.140469 10.050446  9.981883 11.811964 11.785327 10.167293 #> [687]  4.809112  6.855934  8.359596  8.021714 11.230263  4.558431  5.328370 #> [694]  6.483709  5.636883  7.410164  6.500370  3.857655 12.297259 12.297259 #> [701]  7.210297  9.772877 11.504207 10.563811 12.075006  8.234947  8.229794 #> [708]  8.144866  9.975980 15.060127  5.615884  8.547554  8.604203  7.047757 #> [715]  9.167929  5.440462  6.529727  6.306557  6.809333  9.566230  7.931209 #> [722]  9.922158  8.713297 20.000000 20.000000  5.924440  5.913467  5.665973 #> [729]  5.840162  6.212313  4.949328  4.565493  7.210170  5.275101  5.923645 #> [736]  6.874316  7.255238  7.846925  9.046988  8.286622  8.760349 12.032731 #> [743]  9.386415 10.123158 11.720920  6.243418 11.123340 16.879992 11.689726 #> [750] 10.596207 12.369036 12.122174  9.902068 11.007998 12.309419 13.140469 #> [757] 10.050446  9.981883 11.811964 11.785327 10.167293  4.809112  6.855934 #> [764]  8.359596  8.021714 11.230263  4.558431  5.328370  6.483709  5.636883 #> [771]  7.410164  6.500370  3.857655 12.297259 12.297259  7.210297  9.772877 #> [778] 11.504207 10.563811 12.075006  8.234947  8.229794  8.144866  9.975980 #> [785] 15.060127  5.615884  8.547554  8.604203  7.047757  9.167929  5.440462 #> [792]  6.529727  6.306557  6.809333  9.566230  7.931209  9.922158  8.713297 #> [799] 20.000000 20.000000  5.924440  5.913467  5.665973  5.840162  6.212313 #> [806]  4.949328  4.565493  7.210170  5.275101  5.923645  6.874316  7.255238 #> [813]  7.846925  9.046988  8.286622  8.760349 12.032731  9.386415 10.123158 #> [820] 11.720920  6.243418 11.123340 16.879992 11.689726 10.596207 12.369036 #> [827] 12.122174  9.902068 11.007998 12.309419 13.140469 10.050446  9.981883 #> [834] 11.811964 11.785327 10.167293  4.809112  6.855934  8.359596  8.021714 #> [841] 11.230263  4.558431  5.328370  6.483709  5.636883  7.410164  6.500370 #> [848]  3.857655 12.297259 12.297259  7.210297  9.772877 11.504207 10.563811 #> [855] 12.075006  8.234947  8.229794  8.144866  9.975980 15.060127  5.615884 #> [862]  8.547554  8.604203  7.047757  9.167929  5.440462  6.529727  6.306557 #> [869]  6.809333  9.566230  7.931209  9.922158  8.713297 20.000000 20.000000 #> [876]  5.924440  5.913467  5.665973  5.840162  6.212313  4.949328  4.565493 #> [883]  7.210170  5.275101  5.923645  6.874316  7.255238  7.846925  9.046988 #> [890]  8.286622  8.760349 12.032731  9.386415 10.123158 11.720920  6.243418 #> [897] 11.123340 16.879992 11.689726 10.596207 #>"},{"path":"/reference/extract_coord_of_shifted_hex_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Coordinates of Shifted Hexagonal Grid — extract_coord_of_shifted_hex_grid","title":"Extract Coordinates of Shifted Hexagonal Grid — extract_coord_of_shifted_hex_grid","text":"function takes input data, includes hexbin ID, extracts coordinates hexagonal grid specified shift. resulting dataset includes hexagon centroids updated coordinates additional information counts within hexagon.","code":""},{"path":"/reference/extract_coord_of_shifted_hex_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Coordinates of Shifted Hexagonal Grid — extract_coord_of_shifted_hex_grid","text":"","code":"extract_coord_of_shifted_hex_grid(   nldr_data_with_hb_id,   num_bins_x,   hex_full_count_df,   shift_x = NA,   shift_y = NA,   cell_area = 1 )"},{"path":"/reference/extract_coord_of_shifted_hex_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Coordinates of Shifted Hexagonal Grid — extract_coord_of_shifted_hex_grid","text":"nldr_data_with_hb_id containing 2D embeddings hexbin ID. num_bins_x number bins along x-axis hexagonal grid. hex_full_count_df data frame information hexagonal grid cells. shift_x value centroids need shifted x-axis. shift negative direction along x-axis, set shift_x positive value (shift_x > 0); otherwise, shift positive direction, use negative value (shift_x < 0). provided, calculated half cell diameter hexagon. shift_y value centroids need shifted y-axis. shift negative direction along y-axis, set shift_y positive value (shift_y > 0); otherwise, shift positive direction, use negative value (shift_y < 0). provided, calculated half cell diameter hexagon. cell_area numeric value initialise area hexagon. default 1.","code":""},{"path":"/reference/extract_coord_of_shifted_hex_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Coordinates of Shifted Hexagonal Grid — extract_coord_of_shifted_hex_grid","text":"data frame updated hexagon coordinates, hexagon IDs, counts within hexagon. list containing: hex_full_count_df_new Data frame updated hexagonal grid information, including counts standardized counts. nldr_df_with_new_hexID Data frame new hexagonal bin IDs assigned 2D embeddings.","code":""},{"path":"/reference/extract_coord_of_shifted_hex_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Coordinates of Shifted Hexagonal Grid — extract_coord_of_shifted_hex_grid","text":"","code":"num_bins_x <- 4 shape_value <- 1.833091 hexbin_data_object <- extract_hexbin_centroids(nldr_df = s_curve_noise_umap, num_bins = num_bins_x, shape_val = shape_value) df_bin_centroids <- hexbin_data_object$hexdf_data hex_full_count_df <- generate_full_grid_info(df_bin_centroids) UMAP_data_with_hb_id <- s_curve_noise_umap |> dplyr::mutate(hb_id = hexbin_data_object$hb_data@cID) extract_coord_of_shifted_hex_grid(nldr_data_with_hb_id = UMAP_data_with_hb_id, num_bins_x = num_bins_x, hex_full_count_df) #> $hex_full_count_df_new #> # A tibble: 300 × 9 #>        x     y    id   c_x   c_y hexID polygon_id counts std_counts #>    <dbl> <dbl> <int> <dbl> <dbl> <int>      <int>  <int>      <dbl> #>  1 -3.09 -5.83     1 -3.81 -6.28     1          1     NA       NA   #>  2 -3.09 -6.73     1 -3.81 -6.28     1          1     NA       NA   #>  3 -3.81 -7.19     1 -3.81 -6.28     1          1     NA       NA   #>  4 -4.52 -6.73     1 -3.81 -6.28     1          1     NA       NA   #>  5 -4.52 -5.83     1 -3.81 -6.28     1          1     NA       NA   #>  6 -3.81 -5.37     1 -3.81 -6.28     1          1     NA       NA   #>  7 -1.66 -5.83     2 -2.38 -6.28     2          2      4        0.4 #>  8 -1.66 -6.73     2 -2.38 -6.28     2          2      4        0.4 #>  9 -2.38 -7.19     2 -2.38 -6.28     2          2      4        0.4 #> 10 -3.09 -6.73     2 -2.38 -6.28     2          2      4        0.4 #> # ℹ 290 more rows #>  #> $nldr_df_with_new_hexID #>         UMAP1        UMAP2 hb_id #> 1  -2.8097466 -3.910005483     6 #> 2   0.9587085 -0.002708352    29 #> 3   1.5389855  0.462163394    29 #> 4  -2.3129820 -5.495084256     2 #> 5  -1.7648455 -3.461140117    12 #> 6   1.5291731  5.746500231    49 #> 7   0.9304771 -0.175236058    29 #> 8   0.3194170 -1.614071523    18 #> 9   1.3675692  0.054122172    29 #> 10  1.9025902  4.943403570    45 #> 11  0.4080949 -1.525707795    18 #> 12 -2.9735853 -3.600461658    11 #> 13  2.2396519  4.583359135    45 #> 14 -2.8567553 -4.284969555     6 #> 15  0.4467211 -1.780856063    18 #> 16  1.3552697  3.435359060    39 #> 17 -2.4962950 -3.502364361    12 #> 18  1.3486792  3.477064406    39 #> 19  0.1830594 -1.754456198    18 #> 20 -2.3455605 -5.676414556     2 #> 21  0.8137371 -0.419929238    24 #> 22 -2.7317882 -5.350256398     6 #> 23 -2.7607269 -4.058474305     6 #> 24  1.1678508  5.807591478    49 #> 25  1.2701112  1.606845833    34 #> 26 -1.6341561 -4.391463483     7 #> 27 -0.5902292 -2.519974956    18 #> 28  0.0244208 -1.012724342    23 #> 29 -2.0648469 -4.728244274     6 #> 30  0.3033282 -0.986658735    23 #> 31  1.1236335  1.058988539    29 #> 32  1.1058204  4.622732304    44 #> 33  0.4424786 -1.323557255    18 #> 34 -3.0888293 -3.715523544    11 #> 35  2.2523472  5.375278885    50 #> 36 -2.6910127 -5.402672793     6 #> 37  0.8102587  4.536541146    44 #> 38  1.4767116  5.758544173    49 #> 39  1.3834120  5.820530794    49 #> 40 -3.2703577 -3.928162328    11 #> 41 -1.0720147 -3.137653586    13 #> 42  1.4614730  1.011057982    29 #> 43 -1.5951242 -4.821159579     7 #> 44  1.5670651  0.820999232    29 #> 45  1.3101234  0.696316310    29 #> 46  0.6999723  3.925631251    38 #> 47 -2.4996853 -5.742540480     2 #> 48 -3.0293226 -4.020706179     6 #> 49  2.1260682  5.479212510    50 #> 50 -2.9640458 -4.487579628     6 #> 51  0.6620562 -0.544895479    24 #> 52  1.1860855 -0.135167840    29 #> 53  1.0530198  5.412247159    49 #> 54 -1.9462124 -5.335024462     7 #> 55  1.1289559  4.252394278    44 #> 56  0.7288703  5.083452963    44 #> 57  0.8913631  0.477821407    29 #> 58  2.4165932  4.412252828    45 #> 59  2.2395888  4.579307233    45 #> 60 -1.0191663 -3.551255942    12 #> 61  0.9769054  5.485903919    49 #> 62  2.1492828  4.432353405    39 #> 63 -0.3539761 -1.620782255    18 #> 64  2.4555949  5.109462560    45 #> 65 -1.3494107 -3.882030702     7 #> 66 -1.8130766 -5.321458199     7 #> 67  1.8021561  3.660608734    39 #> 68  0.8633422  0.619339211    28 #> 69  0.6249804  4.329653948    38 #> 70  2.0282706  3.973496871    39 #> 71  1.3656407  4.467208531    44 #> 72 -0.4312690 -1.703695332    17 #> 73 -2.3369666 -5.540483168     2 #> 74 -1.5812238 -4.959468236     7 #> 75  1.9432959  3.907273242    39 #>"},{"path":"/reference/extract_hexbin_centroids.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract hexagonal bin centroids coordinates and the corresponding standardize counts. — extract_hexbin_centroids","title":"Extract hexagonal bin centroids coordinates and the corresponding standardize counts. — extract_hexbin_centroids","text":"Extract hexagonal bin centroids coordinates corresponding standardize counts.","code":""},{"path":"/reference/extract_hexbin_centroids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract hexagonal bin centroids coordinates and the corresponding standardize counts. — extract_hexbin_centroids","text":"","code":"extract_hexbin_centroids(centroids_df, counts_df)"},{"path":"/reference/extract_hexbin_centroids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract hexagonal bin centroids coordinates and the corresponding standardize counts. — extract_hexbin_centroids","text":"centroids_df data frame contains hexagonal bin centroid coordinates hexagon IDs. counts_df data frame contains hexagon IDs standardize number points within hexagon.","code":""},{"path":"/reference/extract_hexbin_centroids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract hexagonal bin centroids coordinates and the corresponding standardize counts. — extract_hexbin_centroids","text":"data frame contains hexagon ID, centroid coordinates, standardize counts.","code":""},{"path":"/reference/extract_hexbin_centroids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract hexagonal bin centroids coordinates and the corresponding standardize counts. — extract_hexbin_centroids","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled,                                         x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,                                         y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. centroid_list <- generate_full_grid_centroids(nldr_df = s_curve_noise_umap_scaled,                                              x = \"UMAP1\", y = \"UMAP2\",                                              num_bins_x = num_bins_x,                                              num_bins_y = num_bins_y,                                              x_start = NA, y_start = NA,                                              buffer_x = NA,                                              buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. all_centroids_df <- as.data.frame(do.call(cbind, centroid_list)) s_curve_noise_umap_scaled_rm_id <- s_curve_noise_umap_scaled |> dplyr::select(-ID) nldr_with_hb_id_list <- assign_data(nldr_df = s_curve_noise_umap_scaled_rm_id, centroid_df = all_centroids_df) umap_with_hb_id <- as.data.frame(do.call(cbind, nldr_with_hb_id_list)) std_counts_list <- compute_std_counts(nldr_df_with_hex_id = umap_with_hb_id) counts_df <- as.data.frame(do.call(cbind, std_counts_list)) extract_hexbin_centroids(centroids_df = all_centroids_df, counts_df = counts_df) #>    hexID       c_x c_y std_counts #> 1      1 0.0000000 0.0 0.40000000 #> 2      2 0.3464102 0.0 0.26666667 #> 3      6 0.1732051 0.3 0.86666667 #> 4      7 0.5196152 0.3 0.13333333 #> 5     12 0.3464102 0.6 0.20000000 #> 6     13 0.6928203 0.6 0.53333333 #> 7     18 0.8660254 0.9 0.80000000 #> 8     23 0.6928203 1.2 0.06666667 #> 9     27 0.5196152 1.5 0.06666667 #> 10    28 0.8660254 1.5 1.00000000 #> 11    33 0.6928203 1.8 0.46666667 #> 12    34 1.0392305 1.8 0.20000000"},{"path":"/reference/extract_hexbin_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract hexagonal bin mean coordinates and the corresponding standardize counts. — extract_hexbin_mean","title":"Extract hexagonal bin mean coordinates and the corresponding standardize counts. — extract_hexbin_mean","text":"Extract hexagonal bin mean coordinates corresponding standardize counts.","code":""},{"path":"/reference/extract_hexbin_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract hexagonal bin mean coordinates and the corresponding standardize counts. — extract_hexbin_mean","text":"","code":"extract_hexbin_mean(nldr_df_with_hex_id, counts_df)"},{"path":"/reference/extract_hexbin_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract hexagonal bin mean coordinates and the corresponding standardize counts. — extract_hexbin_mean","text":"nldr_df_with_hex_id data frame 2D embeddings hexagonal bin IDs. counts_df data frame contains hexagon IDs standardize number points within hexagon.","code":""},{"path":"/reference/extract_hexbin_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract hexagonal bin mean coordinates and the corresponding standardize counts. — extract_hexbin_mean","text":"data frame contains hexagon ID, bin mean coordinates, standardize counts.","code":""},{"path":"/reference/extract_hexbin_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract hexagonal bin mean coordinates and the corresponding standardize counts. — extract_hexbin_mean","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled,                                         x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,                                         y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. centroid_list <- generate_full_grid_centroids(nldr_df = s_curve_noise_umap_scaled,                                              x = \"UMAP1\", y = \"UMAP2\",                                              num_bins_x = num_bins_x,                                              num_bins_y = num_bins_y,                                              x_start = NA, y_start = NA,                                              buffer_x = NA,                                              buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. all_centroids_df <- as.data.frame(do.call(cbind, centroid_list)) s_curve_noise_umap_scaled_rm_id <- s_curve_noise_umap_scaled |> dplyr::select(-ID) nldr_with_hb_id_list <- assign_data(nldr_df = s_curve_noise_umap_scaled_rm_id, centroid_df = all_centroids_df) umap_with_hb_id <- as.data.frame(do.call(cbind, nldr_with_hb_id_list)) std_counts_list <- compute_std_counts(nldr_df_with_hex_id = umap_with_hb_id) counts_df <- as.data.frame(do.call(cbind, std_counts_list)) extract_hexbin_mean(nldr_df_with_hex_id = umap_with_hb_id, counts_df = counts_df) #> # A tibble: 12 × 4 #>    hexID   c_x    c_y std_counts #>    <dbl> <dbl>  <dbl>      <dbl> #>  1     1 0.137 0.0312     0.4    #>  2     2 0.268 0.0949     0.267  #>  3     6 0.127 0.261      0.867  #>  4     7 0.389 0.359      0.133  #>  5    12 0.491 0.568      0.2    #>  6    13 0.632 0.663      0.533  #>  7    18 0.775 0.916      0.8    #>  8    23 0.793 1.10       0.0667 #>  9    27 0.680 1.51       0.0667 #> 10    28 0.857 1.49       1      #> 11    33 0.779 1.70       0.467  #> 12    34 0.969 1.66       0.2"},{"path":"/reference/find_benchmark_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Benchmark Value To Remove Long Edges — find_benchmark_value","title":"Find Benchmark Value To Remove Long Edges — find_benchmark_value","text":"function finds benchmark value remove long edges based differences distance column.","code":""},{"path":"/reference/find_benchmark_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Benchmark Value To Remove Long Edges — find_benchmark_value","text":"","code":"find_benchmark_value(distance_edges, distance_col)"},{"path":"/reference/find_benchmark_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Benchmark Value To Remove Long Edges — find_benchmark_value","text":"distance_edges data frame containing distances. distance_col name column containing distances.","code":""},{"path":"/reference/find_benchmark_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Benchmark Value To Remove Long Edges — find_benchmark_value","text":"benchmark value, first largest difference distance column.","code":""},{"path":"/reference/find_benchmark_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Benchmark Value To Remove Long Edges — find_benchmark_value","text":"","code":"training_data <- s_curve_noise_training num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,  y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. hex_bin_obj <- generate_hex_binning_info(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x, num_bins_y = num_bins_y, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. all_centroids_df <- as.data.frame(do.call(cbind, hex_bin_obj$full_grid_hex_centroids)) counts_df <- as.data.frame(do.call(cbind, hex_bin_obj$hex_id_with_std_counts)) df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df, counts_df = counts_df) UMAP_data_with_hb_id <- hex_bin_obj$nldr_data_with_hex_id df_all <- dplyr::bind_cols(training_data |> dplyr::select(-ID), UMAP_data_with_hb_id) df_bin <- avg_highD_data(df_all, column_start_text = \"x\") tr1_object <- triangulate_bin_centroids(hex_bin_df = df_bin_centroids, x = \"c_x\", y = \"c_y\") tr_from_to_df <- generate_edge_info(triangular_object = tr1_object) distance_df <- cal_2d_dist(tr_from_to_df_coord = tr_from_to_df, start_x = \"x_from\", start_y = \"y_from\", end_x = \"x_to\", end_y = \"y_to\", select_col_vec = c(\"from\", \"to\", \"distance\")) find_benchmark_value(distance_edges = distance_df, distance_col = \"distance\") #> [1] 0.6"},{"path":"/reference/find_low_density_hexagons.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Low-Density Hexagons — find_low_density_hexagons","title":"Find Low-Density Hexagons — find_low_density_hexagons","text":"function identifies hexagons low density based mean density neighboring hexagons.","code":""},{"path":"/reference/find_low_density_hexagons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Low-Density Hexagons — find_low_density_hexagons","text":"","code":"find_low_density_hexagons(   df_bin_centroids_all,   num_bins_x,   df_bin_centroids_low )"},{"path":"/reference/find_low_density_hexagons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Low-Density Hexagons — find_low_density_hexagons","text":"df_bin_centroids_all data frame containing hexagonal bin centroids. num_bins_x Number bins along x-axis hexagon binning. df_bin_centroids_low data frame containing identified low-density hexagonal bin centroids.","code":""},{"path":"/reference/find_low_density_hexagons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Low-Density Hexagons — find_low_density_hexagons","text":"vector containing IDs hexagons removed investigating neighboring bins.","code":""},{"path":"/reference/find_low_density_hexagons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Low-Density Hexagons — find_low_density_hexagons","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,  y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. hex_bin_obj <- generate_hex_binning_info(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x, num_bins_y = num_bins_y, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. all_centroids_df <- as.data.frame(do.call(cbind, hex_bin_obj$full_grid_hex_centroids)) counts_df <- as.data.frame(do.call(cbind, hex_bin_obj$hex_id_with_std_counts)) df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df, counts_df = counts_df) df_bin_centroids_low <- df_bin_centroids |> dplyr::filter(std_counts <= 0.43) find_low_density_hexagons(df_bin_centroids_all = df_bin_centroids, num_bins_x = num_bins_x, df_bin_centroids_low = df_bin_centroids_low) #> numeric(0)"},{"path":"/reference/find_non_empty_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Number of Bins Required — find_non_empty_bins","title":"Find the Number of Bins Required — find_non_empty_bins","text":"function determines number bins along x y axes obtain specific number non-empty bins.","code":""},{"path":"/reference/find_non_empty_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Number of Bins Required — find_non_empty_bins","text":"","code":"find_non_empty_bins(   nldr_df_with_id,   x = \"UMAP1\",   y = \"UMAP2\",   non_empty_bins,   x_start = NA,   y_start = NA,   buffer_x = NA,   buffer_y = NA,   hex_size = NA )"},{"path":"/reference/find_non_empty_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Number of Bins Required — find_non_empty_bins","text":"nldr_df_with_id data frame containing 2D embeddings unique ID column. x name column contains first 2D embeddings component. y name column contains second 2D embeddings component. non_empty_bins desired number non-empty bins. x_start Starting point along x-axis hexagonal binning. y_start Starting point along y-axis hexagonal binning. buffer_x buffer size along x-axis. buffer_y buffer size along y-axis. hex_size numeric value initializes radius outer circle surrounding hexagon.","code":""},{"path":"/reference/find_non_empty_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Number of Bins Required — find_non_empty_bins","text":"number bins along x y axes needed achieve specific number non-empty bins.","code":""},{"path":"/reference/find_non_empty_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Number of Bins Required — find_non_empty_bins","text":"","code":"find_non_empty_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", non_empty_bins = 10, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> $num_bins_x #> [1] 3 #>  #> $num_bins_y #> [1] 6 #>"},{"path":"/reference/find_pts_in_hexbins.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Points in Hexagonal Bins — find_pts_in_hexbins","title":"Find Points in Hexagonal Bins — find_pts_in_hexbins","text":"function maps points corresponding hexagonal bins based provided data frames.","code":""},{"path":"/reference/find_pts_in_hexbins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Points in Hexagonal Bins — find_pts_in_hexbins","text":"","code":"find_pts_in_hexbins(nldr_data_with_hb_id)"},{"path":"/reference/find_pts_in_hexbins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Points in Hexagonal Bins — find_pts_in_hexbins","text":"nldr_data_with_hb_id data frame 2D embedding data, ID hexagonal bin IDs.","code":""},{"path":"/reference/find_pts_in_hexbins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Points in Hexagonal Bins — find_pts_in_hexbins","text":"data frame hexagonal bin IDs corresponding points.","code":""},{"path":"/reference/find_pts_in_hexbins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Points in Hexagonal Bins — find_pts_in_hexbins","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled,                                         x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,                                         y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. centroid_list <- generate_full_grid_centroids(nldr_df = s_curve_noise_umap_scaled,                                              x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x,                                              num_bins_y = num_bins_y, x_start = NA,                                              y_start = NA, buffer_x = NA,                                              buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. all_centroids_df <- as.data.frame(do.call(cbind, centroid_list)) s_curve_noise_umap_scaled_rm_id <- s_curve_noise_umap_scaled |> dplyr::select(-ID) nldr_with_hb_id_list <- assign_data(nldr_df = s_curve_noise_umap_scaled_rm_id, centroid_df = all_centroids_df) umap_with_hb_id <- as.data.frame(do.call(cbind, nldr_with_hb_id_list)) umap_with_hb_id <- umap_with_hb_id |> dplyr::mutate(ID = s_curve_noise_umap_scaled$ID) find_pts_in_hexbins(nldr_data_with_hb_id = umap_with_hb_id) #> $hexID #>  [1]  6 18  1 33 13 28 23 12 34  7  2 27 #>  #> $pts_list #> $pts_list$`Points in hexID: 6` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $pts_list$`Points in hexID: 18` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $pts_list$`Points in hexID: 1` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $pts_list$`Points in hexID: 33` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $pts_list$`Points in hexID: 13` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $pts_list$`Points in hexID: 28` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $pts_list$`Points in hexID: 23` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $pts_list$`Points in hexID: 12` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $pts_list$`Points in hexID: 34` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $pts_list$`Points in hexID: 7` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $pts_list$`Points in hexID: 2` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $pts_list$`Points in hexID: 27` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #>"},{"path":"/reference/fit_high_d_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the 2D model and lift into high-D — fit_high_d_model","title":"Construct the 2D model and lift into high-D — fit_high_d_model","text":"function fits high-dimensional model using hexagonal bins provides options customize modeling process, including choice bin centroids bin means, removal low-density hexagons, averaging high-dimensional data.","code":""},{"path":"/reference/fit_high_d_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the 2D model and lift into high-D — fit_high_d_model","text":"","code":"fit_high_d_model(   training_data,   nldr_df_with_id,   x = \"UMAP1\",   y = \"UMAP2\",   num_bins_x = NA,   num_bins_y = NA,   x_start = NA,   y_start = NA,   buffer_x = NA,   buffer_y = NA,   hex_size = NA,   is_bin_centroid = TRUE,   is_rm_lwd_hex = FALSE,   benchmark_to_rm_lwd_hex = NA,   is_avg_high_d = TRUE,   column_start_text = \"x\" )"},{"path":"/reference/fit_high_d_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct the 2D model and lift into high-D — fit_high_d_model","text":"training_data data frame containing training high-dimensional data. nldr_df_with_id data frame containing 2D embeddings unique identifier. x name column contains first 2D embeddings component. y name column contains second 2D embeddings component. num_bins_x Number bins along x-axis. num_bins_y Number bins along y-axis. x_start Starting point along x-axis hexagonal binning. y_start Starting point along y-axis hexagonal binning. buffer_x buffer size along x-axis. buffer_y buffer size along y-axis. hex_size numeric value initializes radius outer circle surrounding hexagon. is_bin_centroid Logical, indicating whether use bin centroids (default TRUE). is_rm_lwd_hex Logical, indicating whether remove low-density hexagons (default FALSE). benchmark_to_rm_lwd_hex benchmark value remove low-density hexagons. is_avg_high_d Logical, indicating whether average high-dimensional data within bins (default TRUE). column_start_text text prefix columns high-dimensional data.","code":""},{"path":"/reference/fit_high_d_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the 2D model and lift into high-D — fit_high_d_model","text":"list containing data frame high-dimensional coordinates 2D bin centroids (df_bin) data frame containing information hexagonal bin centroids (df_bin_centroids) 2D.","code":""},{"path":"/reference/fit_high_d_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct the 2D model and lift into high-D — fit_high_d_model","text":"","code":"fit_high_d_model(training_data = s_curve_noise_training, nldr_df_with_id = s_curve_noise_umap_scaled) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> $df_bin #> # A tibble: 12 × 8 #>    hb_id      x1    x2     x3        x4        x5       x6        x7 #>    <dbl>   <dbl> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>     <dbl> #>  1     1 -0.753  1.62  -1.56   0.00687   0.00277  -0.0176  -0.000562 #>  2     2  0.213  1.67  -1.91   0.00714  -0.00672  -0.00213 -0.000491 #>  3     6 -0.0291 0.403 -1.87   0.00370  -0.000454 -0.0209  -0.00177  #>  4     7  0.943  0.757 -1.32  -0.00720  -0.00319   0.0572   0.00230  #>  5    12  0.799  0.527 -0.476  0.00328   0.00490  -0.00246 -0.000786 #>  6    13  0.660  1.51  -0.331 -0.000441  0.000757  0.0274   0.00201  #>  7    18 -0.452  1.07   0.246  0.00355   0.00165   0.00457  0.00121  #>  8    23 -0.988  1.64   1.16   0.00754  -0.0104   -0.00129  0.00489  #>  9    27 -0.557  1.52   1.83   0.00998   0.00198  -0.0936  -0.00417  #> 10    28  0.0233 0.749  1.84  -0.00276   0.00397  -0.00751 -0.00132  #> 11    33  0.689  1.74   1.64   0.00210   0.00370  -0.00532 -0.000634 #> 12    34  0.984  0.809  1.15   0.00437  -0.00191   0.0210   0.000373 #>  #> $df_bin_centroids #>    hexID       c_x c_y std_counts #> 1      1 0.0000000 0.0 0.40000000 #> 2      2 0.3464102 0.0 0.26666667 #> 3      6 0.1732051 0.3 0.86666667 #> 4      7 0.5196152 0.3 0.13333333 #> 5     12 0.3464102 0.6 0.20000000 #> 6     13 0.6928203 0.6 0.53333333 #> 7     18 0.8660254 0.9 0.80000000 #> 8     23 0.6928203 1.2 0.06666667 #> 9     27 0.5196152 1.5 0.06666667 #> 10    28 0.8660254 1.5 1.00000000 #> 11    33 0.6928203 1.8 0.46666667 #> 12    34 1.0392305 1.8 0.20000000 #>"},{"path":"/reference/full_hex_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Hexagonal Coordinates — full_hex_grid","title":"Generate Hexagonal Coordinates — full_hex_grid","text":"function generates coordinates hexagons passing hexagonal centroids.","code":""},{"path":"/reference/full_hex_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Hexagonal Coordinates — full_hex_grid","text":"","code":"full_hex_grid(hexdf_data)"},{"path":"/reference/full_hex_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Hexagonal Coordinates — full_hex_grid","text":"hexdf_data dataset hexbin ID centroid coordinates.","code":""},{"path":"/reference/full_hex_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Hexagonal Coordinates — full_hex_grid","text":"tibble containing coordinates hexagons based hexagonal centroids.","code":""},{"path":"/reference/full_hex_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Hexagonal Coordinates — full_hex_grid","text":"","code":"num_bins_x <- 4 shape_value <- 1.833091 hexbin_data_object <- extract_hexbin_centroids(nldr_df = s_curve_noise_umap, num_bins = num_bins_x, shape_val = shape_value) df_bin_centroids <- hexbin_data_object$hexdf_data full_centroid_df <- generate_full_grid_centroids(df_bin_centroids) full_hex_grid(full_centroid_df) #> # A tibble: 300 × 3 #>        x     y    id #>    <dbl> <dbl> <int> #>  1 -2.55 -5.29     1 #>  2 -2.55 -6.20     1 #>  3 -3.27 -6.65     1 #>  4 -3.99 -6.20     1 #>  5 -3.99 -5.29     1 #>  6 -3.27 -4.84     1 #>  7 -1.12 -5.29     2 #>  8 -1.12 -6.20     2 #>  9 -1.84 -6.65     2 #> 10 -2.55 -6.20     2 #> # ℹ 290 more rows"},{"path":"/reference/gen_hex_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Hexagonal Coordinates — gen_hex_coordinates","title":"Generate Hexagonal Coordinates — gen_hex_coordinates","text":"function generates coordinates hexagons passing hexagonal centroids.","code":""},{"path":"/reference/gen_hex_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Hexagonal Coordinates — gen_hex_coordinates","text":"","code":"gen_hex_coordinates(all_centroids_df, hex_size = NA)"},{"path":"/reference/gen_hex_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Hexagonal Coordinates — gen_hex_coordinates","text":"all_centroids_df dataset hexbin ID centroid coordinates. hex_size numeric value initializes radius outer circle surrounding hexagon.","code":""},{"path":"/reference/gen_hex_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Hexagonal Coordinates — gen_hex_coordinates","text":"list contains polygon id, x y coordinates (hex_poly_id, x, y respectively) hexagons.","code":""},{"path":"/reference/gen_hex_coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Hexagonal Coordinates — gen_hex_coordinates","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,  y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. centroid_list <- generate_full_grid_centroids(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x, num_bins_y = num_bins_y, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. all_centroids_df <- as.data.frame(do.call(cbind, centroid_list)) gen_hex_coordinates(all_centroids_df, hex_size = NA) #> Hex size is set to 0.2. #> $hex_poly_id #>   [1]  1  1  1  1  1  1  2  2  2  2  2  2  3  3  3  3  3  3  4  4  4  4  4  4  5 #>  [26]  5  5  5  5  5  6  6  6  6  6  6  7  7  7  7  7  7  8  8  8  8  8  8  9  9 #>  [51]  9  9  9  9 10 10 10 10 10 10 11 11 11 11 11 11 12 12 12 12 12 12 13 13 13 #>  [76] 13 13 13 14 14 14 14 14 14 15 15 15 15 15 15 16 16 16 16 16 16 17 17 17 17 #> [101] 17 17 18 18 18 18 18 18 19 19 19 19 19 19 20 20 20 20 20 20 21 21 21 21 21 #> [126] 21 22 22 22 22 22 22 23 23 23 23 23 23 24 24 24 24 24 24 25 25 25 25 25 25 #> [151] 26 26 26 26 26 26 27 27 27 27 27 27 28 28 28 28 28 28 29 29 29 29 29 29 30 #> [176] 30 30 30 30 30 31 31 31 31 31 31 32 32 32 32 32 32 33 33 33 33 33 33 34 34 #> [201] 34 34 34 34 35 35 35 35 35 35 36 36 36 36 36 36 37 37 37 37 37 37 38 38 38 #> [226] 38 38 38 39 39 39 39 39 39 40 40 40 40 40 40 #>  #> $x #>   [1]  0.1732051  0.1732051  0.0000000 -0.1732051 -0.1732051  0.0000000 #>   [7]  0.5196152  0.5196152  0.3464102  0.1732051  0.1732051  0.3464102 #>  [13]  0.8660254  0.8660254  0.6928203  0.5196152  0.5196152  0.6928203 #>  [19]  1.2124356  1.2124356  1.0392305  0.8660254  0.8660254  1.0392305 #>  [25]  1.5588457  1.5588457  1.3856406  1.2124356  1.2124356  1.3856406 #>  [31]  0.3464102  0.3464102  0.1732051  0.0000000  0.0000000  0.1732051 #>  [37]  0.6928203  0.6928203  0.5196152  0.3464102  0.3464102  0.5196152 #>  [43]  1.0392305  1.0392305  0.8660254  0.6928203  0.6928203  0.8660254 #>  [49]  1.3856406  1.3856406  1.2124356  1.0392305  1.0392305  1.2124356 #>  [55]  1.7320508  1.7320508  1.5588457  1.3856406  1.3856406  1.5588457 #>  [61]  0.1732051  0.1732051  0.0000000 -0.1732051 -0.1732051  0.0000000 #>  [67]  0.5196152  0.5196152  0.3464102  0.1732051  0.1732051  0.3464102 #>  [73]  0.8660254  0.8660254  0.6928203  0.5196152  0.5196152  0.6928203 #>  [79]  1.2124356  1.2124356  1.0392305  0.8660254  0.8660254  1.0392305 #>  [85]  1.5588457  1.5588457  1.3856406  1.2124356  1.2124356  1.3856406 #>  [91]  0.3464102  0.3464102  0.1732051  0.0000000  0.0000000  0.1732051 #>  [97]  0.6928203  0.6928203  0.5196152  0.3464102  0.3464102  0.5196152 #> [103]  1.0392305  1.0392305  0.8660254  0.6928203  0.6928203  0.8660254 #> [109]  1.3856406  1.3856406  1.2124356  1.0392305  1.0392305  1.2124356 #> [115]  1.7320508  1.7320508  1.5588457  1.3856406  1.3856406  1.5588457 #> [121]  0.1732051  0.1732051  0.0000000 -0.1732051 -0.1732051  0.0000000 #> [127]  0.5196152  0.5196152  0.3464102  0.1732051  0.1732051  0.3464102 #> [133]  0.8660254  0.8660254  0.6928203  0.5196152  0.5196152  0.6928203 #> [139]  1.2124356  1.2124356  1.0392305  0.8660254  0.8660254  1.0392305 #> [145]  1.5588457  1.5588457  1.3856406  1.2124356  1.2124356  1.3856406 #> [151]  0.3464102  0.3464102  0.1732051  0.0000000  0.0000000  0.1732051 #> [157]  0.6928203  0.6928203  0.5196152  0.3464102  0.3464102  0.5196152 #> [163]  1.0392305  1.0392305  0.8660254  0.6928203  0.6928203  0.8660254 #> [169]  1.3856406  1.3856406  1.2124356  1.0392305  1.0392305  1.2124356 #> [175]  1.7320508  1.7320508  1.5588457  1.3856406  1.3856406  1.5588457 #> [181]  0.1732051  0.1732051  0.0000000 -0.1732051 -0.1732051  0.0000000 #> [187]  0.5196152  0.5196152  0.3464102  0.1732051  0.1732051  0.3464102 #> [193]  0.8660254  0.8660254  0.6928203  0.5196152  0.5196152  0.6928203 #> [199]  1.2124356  1.2124356  1.0392305  0.8660254  0.8660254  1.0392305 #> [205]  1.5588457  1.5588457  1.3856406  1.2124356  1.2124356  1.3856406 #> [211]  0.3464102  0.3464102  0.1732051  0.0000000  0.0000000  0.1732051 #> [217]  0.6928203  0.6928203  0.5196152  0.3464102  0.3464102  0.5196152 #> [223]  1.0392305  1.0392305  0.8660254  0.6928203  0.6928203  0.8660254 #> [229]  1.3856406  1.3856406  1.2124356  1.0392305  1.0392305  1.2124356 #> [235]  1.7320508  1.7320508  1.5588457  1.3856406  1.3856406  1.5588457 #>  #> $y #>   [1]  0.09959292 -0.09959292 -0.19918584 -0.09959292  0.09959292  0.19918584 #>   [7]  0.09959292 -0.09959292 -0.19918584 -0.09959292  0.09959292  0.19918584 #>  [13]  0.09959292 -0.09959292 -0.19918584 -0.09959292  0.09959292  0.19918584 #>  [19]  0.09959292 -0.09959292 -0.19918584 -0.09959292  0.09959292  0.19918584 #>  [25]  0.09959292 -0.09959292 -0.19918584 -0.09959292  0.09959292  0.19918584 #>  [31]  0.39959292  0.20040708  0.10081416  0.20040708  0.39959292  0.49918584 #>  [37]  0.39959292  0.20040708  0.10081416  0.20040708  0.39959292  0.49918584 #>  [43]  0.39959292  0.20040708  0.10081416  0.20040708  0.39959292  0.49918584 #>  [49]  0.39959292  0.20040708  0.10081416  0.20040708  0.39959292  0.49918584 #>  [55]  0.39959292  0.20040708  0.10081416  0.20040708  0.39959292  0.49918584 #>  [61]  0.69959292  0.50040708  0.40081416  0.50040708  0.69959292  0.79918584 #>  [67]  0.69959292  0.50040708  0.40081416  0.50040708  0.69959292  0.79918584 #>  [73]  0.69959292  0.50040708  0.40081416  0.50040708  0.69959292  0.79918584 #>  [79]  0.69959292  0.50040708  0.40081416  0.50040708  0.69959292  0.79918584 #>  [85]  0.69959292  0.50040708  0.40081416  0.50040708  0.69959292  0.79918584 #>  [91]  0.99959292  0.80040708  0.70081416  0.80040708  0.99959292  1.09918584 #>  [97]  0.99959292  0.80040708  0.70081416  0.80040708  0.99959292  1.09918584 #> [103]  0.99959292  0.80040708  0.70081416  0.80040708  0.99959292  1.09918584 #> [109]  0.99959292  0.80040708  0.70081416  0.80040708  0.99959292  1.09918584 #> [115]  0.99959292  0.80040708  0.70081416  0.80040708  0.99959292  1.09918584 #> [121]  1.29959292  1.10040708  1.00081416  1.10040708  1.29959292  1.39918584 #> [127]  1.29959292  1.10040708  1.00081416  1.10040708  1.29959292  1.39918584 #> [133]  1.29959292  1.10040708  1.00081416  1.10040708  1.29959292  1.39918584 #> [139]  1.29959292  1.10040708  1.00081416  1.10040708  1.29959292  1.39918584 #> [145]  1.29959292  1.10040708  1.00081416  1.10040708  1.29959292  1.39918584 #> [151]  1.59959292  1.40040708  1.30081416  1.40040708  1.59959292  1.69918584 #> [157]  1.59959292  1.40040708  1.30081416  1.40040708  1.59959292  1.69918584 #> [163]  1.59959292  1.40040708  1.30081416  1.40040708  1.59959292  1.69918584 #> [169]  1.59959292  1.40040708  1.30081416  1.40040708  1.59959292  1.69918584 #> [175]  1.59959292  1.40040708  1.30081416  1.40040708  1.59959292  1.69918584 #> [181]  1.89959292  1.70040708  1.60081416  1.70040708  1.89959292  1.99918584 #> [187]  1.89959292  1.70040708  1.60081416  1.70040708  1.89959292  1.99918584 #> [193]  1.89959292  1.70040708  1.60081416  1.70040708  1.89959292  1.99918584 #> [199]  1.89959292  1.70040708  1.60081416  1.70040708  1.89959292  1.99918584 #> [205]  1.89959292  1.70040708  1.60081416  1.70040708  1.89959292  1.99918584 #> [211]  2.19959292  2.00040708  1.90081416  2.00040708  2.19959292  2.29918584 #> [217]  2.19959292  2.00040708  1.90081416  2.00040708  2.19959292  2.29918584 #> [223]  2.19959292  2.00040708  1.90081416  2.00040708  2.19959292  2.29918584 #> [229]  2.19959292  2.00040708  1.90081416  2.00040708  2.19959292  2.29918584 #> [235]  2.19959292  2.00040708  1.90081416  2.00040708  2.19959292  2.29918584 #>"},{"path":"/reference/generate_edge_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Edge Information — generate_edge_info","title":"Generate Edge Information — generate_edge_info","text":"function generates edge information given triangular object, including coordinates vertices -relationships vertices.","code":""},{"path":"/reference/generate_edge_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Edge Information — generate_edge_info","text":"","code":"generate_edge_info(triangular_object)"},{"path":"/reference/generate_edge_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Edge Information — generate_edge_info","text":"triangular_object triangular object generate edge information.","code":""},{"path":"/reference/generate_edge_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Edge Information — generate_edge_info","text":"data frame containing edge information, including -relationships corresponding x y coordinates.","code":""},{"path":"/reference/generate_edge_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Edge Information — generate_edge_info","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled,                                         x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,                                         y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. centroid_list <- generate_full_grid_centroids(nldr_df = s_curve_noise_umap_scaled,                                              x = \"UMAP1\", y = \"UMAP2\",                                              num_bins_x = num_bins_x,                                              num_bins_y = num_bins_y,                                              x_start = NA, y_start = NA,                                              buffer_x = NA,                                              buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. all_centroids_df <- as.data.frame(do.call(cbind, centroid_list)) s_curve_noise_umap_scaled_rm_id <- s_curve_noise_umap_scaled |> dplyr::select(-ID) nldr_with_hb_id_list <- assign_data(nldr_df = s_curve_noise_umap_scaled_rm_id, centroid_df = all_centroids_df) umap_with_hb_id <- as.data.frame(do.call(cbind, nldr_with_hb_id_list)) std_counts_list <- compute_std_counts(nldr_df_with_hex_id = umap_with_hb_id) counts_df <- as.data.frame(do.call(cbind, std_counts_list)) df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df, counts_df = counts_df) tr1_object <- triangulate_bin_centroids(hex_bin_df = df_bin_centroids, x = \"c_x\", y = \"c_y\") generate_edge_info(triangular_object = tr1_object) #> # A tibble: 25 × 6 #>     from    to x_from y_from  x_to  y_to #>    <int> <int>  <dbl>  <dbl> <dbl> <dbl> #>  1     1     2  0        0   0.346   0   #>  2     1     3  0        0   0.173   0.3 #>  3     2     4  0.346    0   0.520   0.3 #>  4     3     4  0.173    0.3 0.520   0.3 #>  5     3     5  0.173    0.3 0.346   0.6 #>  6     4     6  0.520    0.3 0.693   0.6 #>  7     5     6  0.346    0.6 0.693   0.6 #>  8     5     7  0.346    0.6 0.866   0.9 #>  9     5     8  0.346    0.6 0.693   1.2 #> 10     7    12  0.866    0.9 1.04    1.8 #> # ℹ 15 more rows"},{"path":"/reference/generate_eval_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Evaluation Data Frame — generate_eval_df","title":"Generate Evaluation Data Frame — generate_eval_df","text":"function generates evaluation data frame based provided data predictions.","code":""},{"path":"/reference/generate_eval_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Evaluation Data Frame — generate_eval_df","text":"","code":"generate_eval_df(test_data, prediction_df, df_bin, col_start = \"x\")"},{"path":"/reference/generate_eval_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Evaluation Data Frame — generate_eval_df","text":"test_data data set containing high-dimensional data along unique identifier. prediction_df data set 2D embeddings, IDs, predicted hexagonal IDs. df_bin data set averaged/weighted high-dimensional data. col_start text begin column name high-D data","code":""},{"path":"/reference/generate_eval_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Evaluation Data Frame — generate_eval_df","text":"list contains MSE AIC values.","code":""},{"path":"/reference/generate_eval_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Evaluation Data Frame — generate_eval_df","text":"","code":"training_data <- s_curve_noise_training num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,  y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. hex_bin_obj <- generate_hex_binning_info(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x, num_bins_y = num_bins_y, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. all_centroids_df <- as.data.frame(do.call(cbind, hex_bin_obj$full_grid_hex_centroids)) counts_df <- as.data.frame(do.call(cbind, hex_bin_obj$hex_id_with_std_counts)) df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df, counts_df = counts_df) UMAP_data_with_hb_id <- hex_bin_obj$nldr_data_with_hex_id df_all <- dplyr::bind_cols(training_data |> dplyr::select(-ID), UMAP_data_with_hb_id) df_bin <- avg_highD_data(df_all, column_start_text = \"x\") pred_emb_list <- predict_2d_embeddings(test_data = s_curve_noise_training, df_bin_centroids = df_bin_centroids, df_bin = df_bin, type_NLDR = \"UMAP\") pred_df_test <- as.data.frame(do.call(cbind, pred_emb_list)) generate_eval_df(test_data = s_curve_noise_training, prediction_df = pred_df_test, df_bin = df_bin, col_start = \"x\") #> $mse #> [1] 0.2612147 #>  #> $aic #> [1] -536.7666 #>"},{"path":"/reference/generate_full_grid_centroids.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Full Grid Centroids Coordinates — generate_full_grid_centroids","title":"Generate Full Grid Centroids Coordinates — generate_full_grid_centroids","text":"function generates possible centroids full grid based 2D embeddings.","code":""},{"path":"/reference/generate_full_grid_centroids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Full Grid Centroids Coordinates — generate_full_grid_centroids","text":"","code":"generate_full_grid_centroids(   nldr_df,   x = \"UMAP1\",   y = \"UMAP2\",   num_bins_x,   num_bins_y,   x_start = NA,   y_start = NA,   buffer_x = NA,   buffer_y = NA,   hex_size = NA )"},{"path":"/reference/generate_full_grid_centroids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Full Grid Centroids Coordinates — generate_full_grid_centroids","text":"nldr_df data frame containing 2D embeddings. x name column contains first 2D embeddings component. y name column contains second 2D embeddings component. num_bins_x Number bins along x-axis. num_bins_y Number bins along y-axis. x_start Starting point along x-axis hexagonal binning. y_start Starting point along y-axis hexagonal binning. buffer_x buffer size along x-axis. buffer_y buffer size along y-axis. hex_size numeric value initializes radius outer circle surrounding hexagon.","code":""},{"path":"/reference/generate_full_grid_centroids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Full Grid Centroids Coordinates — generate_full_grid_centroids","text":"list contains hexIDs, x y coordinates (hexID, c_x, c_y respectively) hexagon bin centroids.","code":""},{"path":"/reference/generate_full_grid_centroids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Full Grid Centroids Coordinates — generate_full_grid_centroids","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,  y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. generate_full_grid_centroids(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x, num_bins_y = num_bins_y, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> $hexID #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #>  #> $c_x #>  [1] 0.0000000 0.3464102 0.6928203 1.0392305 1.3856406 0.1732051 0.5196152 #>  [8] 0.8660254 1.2124356 1.5588457 0.0000000 0.3464102 0.6928203 1.0392305 #> [15] 1.3856406 0.1732051 0.5196152 0.8660254 1.2124356 1.5588457 0.0000000 #> [22] 0.3464102 0.6928203 1.0392305 1.3856406 0.1732051 0.5196152 0.8660254 #> [29] 1.2124356 1.5588457 0.0000000 0.3464102 0.6928203 1.0392305 1.3856406 #> [36] 0.1732051 0.5196152 0.8660254 1.2124356 1.5588457 #>  #> $c_y #>  [1] 0.0 0.0 0.0 0.0 0.0 0.3 0.3 0.3 0.3 0.3 0.6 0.6 0.6 0.6 0.6 0.9 0.9 0.9 0.9 #> [20] 0.9 1.2 1.2 1.2 1.2 1.2 1.5 1.5 1.5 1.5 1.5 1.8 1.8 1.8 1.8 1.8 2.1 2.1 2.1 #> [39] 2.1 2.1 #>"},{"path":"/reference/generate_full_grid_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Full Grid Information Data Frame — generate_full_grid_info","title":"Generate Full Grid Information Data Frame — generate_full_grid_info","text":"function generates data frame containing coordinates identifiers hexagons, along additional information like counts polygon IDs.","code":""},{"path":"/reference/generate_full_grid_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Full Grid Information Data Frame — generate_full_grid_info","text":"","code":"generate_full_grid_info(df_bin_centroids)"},{"path":"/reference/generate_full_grid_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Full Grid Information Data Frame — generate_full_grid_info","text":"df_bin_centroids data frame hexagonal bin centroids.","code":""},{"path":"/reference/generate_full_grid_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Full Grid Information Data Frame — generate_full_grid_info","text":"data frame columns \"x\", \"y\", \"id\", \"c_x\", \"c_y\", \"hexID\", \"counts\", \"std_counts\", \"polygon_id\".","code":""},{"path":"/reference/generate_full_grid_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Full Grid Information Data Frame — generate_full_grid_info","text":"","code":"num_bins_x <- 4 shape_value <- 1.833091 hexbin_data_object <- extract_hexbin_centroids(nldr_df = s_curve_noise_umap, num_bins = num_bins_x, shape_val = shape_value) df_bin_centroids <- hexbin_data_object$hexdf_data generate_full_grid_info(df_bin_centroids) #> # A tibble: 300 × 9 #>        x     y    id   c_x   c_y hexID counts std_counts polygon_id #>    <dbl> <dbl> <int> <dbl> <dbl> <int>  <int>      <dbl>      <int> #>  1 -2.55 -5.29     1 -3.27 -5.74     1      2      0.222          1 #>  2 -2.55 -6.20     1 -3.27 -5.74     1      2      0.222          1 #>  3 -3.27 -6.65     1 -3.27 -5.74     1      2      0.222          1 #>  4 -3.99 -6.20     1 -3.27 -5.74     1      2      0.222          1 #>  5 -3.99 -5.29     1 -3.27 -5.74     1      2      0.222          1 #>  6 -3.27 -4.84     1 -3.27 -5.74     1      2      0.222          1 #>  7 -1.12 -5.29     2 -1.84 -5.74     2      6      0.667          2 #>  8 -1.12 -6.20     2 -1.84 -5.74     2      6      0.667          2 #>  9 -1.84 -6.65     2 -1.84 -5.74     2      6      0.667          2 #> 10 -2.55 -6.20     2 -1.84 -5.74     2      6      0.667          2 #> # ℹ 290 more rows"},{"path":"/reference/generate_hex_binning_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Hexagonal Binning Info — generate_hex_binning_info","title":"Generate Hexagonal Binning Info — generate_hex_binning_info","text":"function generates list contains hexagonal binning information.","code":""},{"path":"/reference/generate_hex_binning_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Hexagonal Binning Info — generate_hex_binning_info","text":"","code":"generate_hex_binning_info(   nldr_df,   x = \"UMAP1\",   y = \"UMAP2\",   num_bins_x,   num_bins_y,   x_start = NA,   y_start = NA,   buffer_x = NA,   buffer_y = NA,   hex_size = NA )"},{"path":"/reference/generate_hex_binning_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Hexagonal Binning Info — generate_hex_binning_info","text":"nldr_df data frame containing 2D embeddings. x name column contains first 2D embeddings component. y name column contains second 2D embeddings component. num_bins_x Number bins along x-axis. num_bins_y Number bins along y-axis. x_start Starting point along x-axis hexagonal binning. y_start Starting point along y-axis hexagonal binning. buffer_x buffer size along x-axis. buffer_y buffer size along y-axis. hex_size numeric value initializes radius outer circle surrounding hexagon.","code":""},{"path":"/reference/generate_hex_binning_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Hexagonal Binning Info — generate_hex_binning_info","text":"list contains hexagonal bin centroids (full_grid_hex_centroids), hexagonal coordinates full grid(full_grid_hex_poly_coordinates), 2D embeddings corresponding hexagon IDs (nldr_data_with_hex_id), hex bins corresponding standardise counts (hex_id_with_std_counts), total number hex bins(total_hex_bins\"), number non-empty hex bins (num_non_empty_bins) points within hexagon (points_in_hex_bins).","code":""},{"path":"/reference/generate_hex_binning_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Hexagonal Binning Info — generate_hex_binning_info","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,  y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. generate_hex_binning_info(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x, num_bins_y = num_bins_y, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. #> $full_grid_hex_centroids #> $full_grid_hex_centroids$hexID #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #>  #> $full_grid_hex_centroids$c_x #>  [1] 0.0000000 0.3464102 0.6928203 1.0392305 1.3856406 0.1732051 0.5196152 #>  [8] 0.8660254 1.2124356 1.5588457 0.0000000 0.3464102 0.6928203 1.0392305 #> [15] 1.3856406 0.1732051 0.5196152 0.8660254 1.2124356 1.5588457 0.0000000 #> [22] 0.3464102 0.6928203 1.0392305 1.3856406 0.1732051 0.5196152 0.8660254 #> [29] 1.2124356 1.5588457 0.0000000 0.3464102 0.6928203 1.0392305 1.3856406 #> [36] 0.1732051 0.5196152 0.8660254 1.2124356 1.5588457 #>  #> $full_grid_hex_centroids$c_y #>  [1] 0.0 0.0 0.0 0.0 0.0 0.3 0.3 0.3 0.3 0.3 0.6 0.6 0.6 0.6 0.6 0.9 0.9 0.9 0.9 #> [20] 0.9 1.2 1.2 1.2 1.2 1.2 1.5 1.5 1.5 1.5 1.5 1.8 1.8 1.8 1.8 1.8 2.1 2.1 2.1 #> [39] 2.1 2.1 #>  #>  #> $full_grid_hex_poly_coordinates #> $full_grid_hex_poly_coordinates$hex_poly_id #>   [1]  1  1  1  1  1  1  2  2  2  2  2  2  3  3  3  3  3  3  4  4  4  4  4  4  5 #>  [26]  5  5  5  5  5  6  6  6  6  6  6  7  7  7  7  7  7  8  8  8  8  8  8  9  9 #>  [51]  9  9  9  9 10 10 10 10 10 10 11 11 11 11 11 11 12 12 12 12 12 12 13 13 13 #>  [76] 13 13 13 14 14 14 14 14 14 15 15 15 15 15 15 16 16 16 16 16 16 17 17 17 17 #> [101] 17 17 18 18 18 18 18 18 19 19 19 19 19 19 20 20 20 20 20 20 21 21 21 21 21 #> [126] 21 22 22 22 22 22 22 23 23 23 23 23 23 24 24 24 24 24 24 25 25 25 25 25 25 #> [151] 26 26 26 26 26 26 27 27 27 27 27 27 28 28 28 28 28 28 29 29 29 29 29 29 30 #> [176] 30 30 30 30 30 31 31 31 31 31 31 32 32 32 32 32 32 33 33 33 33 33 33 34 34 #> [201] 34 34 34 34 35 35 35 35 35 35 36 36 36 36 36 36 37 37 37 37 37 37 38 38 38 #> [226] 38 38 38 39 39 39 39 39 39 40 40 40 40 40 40 #>  #> $full_grid_hex_poly_coordinates$x #>   [1]  0.1732051  0.1732051  0.0000000 -0.1732051 -0.1732051  0.0000000 #>   [7]  0.5196152  0.5196152  0.3464102  0.1732051  0.1732051  0.3464102 #>  [13]  0.8660254  0.8660254  0.6928203  0.5196152  0.5196152  0.6928203 #>  [19]  1.2124356  1.2124356  1.0392305  0.8660254  0.8660254  1.0392305 #>  [25]  1.5588457  1.5588457  1.3856406  1.2124356  1.2124356  1.3856406 #>  [31]  0.3464102  0.3464102  0.1732051  0.0000000  0.0000000  0.1732051 #>  [37]  0.6928203  0.6928203  0.5196152  0.3464102  0.3464102  0.5196152 #>  [43]  1.0392305  1.0392305  0.8660254  0.6928203  0.6928203  0.8660254 #>  [49]  1.3856406  1.3856406  1.2124356  1.0392305  1.0392305  1.2124356 #>  [55]  1.7320508  1.7320508  1.5588457  1.3856406  1.3856406  1.5588457 #>  [61]  0.1732051  0.1732051  0.0000000 -0.1732051 -0.1732051  0.0000000 #>  [67]  0.5196152  0.5196152  0.3464102  0.1732051  0.1732051  0.3464102 #>  [73]  0.8660254  0.8660254  0.6928203  0.5196152  0.5196152  0.6928203 #>  [79]  1.2124356  1.2124356  1.0392305  0.8660254  0.8660254  1.0392305 #>  [85]  1.5588457  1.5588457  1.3856406  1.2124356  1.2124356  1.3856406 #>  [91]  0.3464102  0.3464102  0.1732051  0.0000000  0.0000000  0.1732051 #>  [97]  0.6928203  0.6928203  0.5196152  0.3464102  0.3464102  0.5196152 #> [103]  1.0392305  1.0392305  0.8660254  0.6928203  0.6928203  0.8660254 #> [109]  1.3856406  1.3856406  1.2124356  1.0392305  1.0392305  1.2124356 #> [115]  1.7320508  1.7320508  1.5588457  1.3856406  1.3856406  1.5588457 #> [121]  0.1732051  0.1732051  0.0000000 -0.1732051 -0.1732051  0.0000000 #> [127]  0.5196152  0.5196152  0.3464102  0.1732051  0.1732051  0.3464102 #> [133]  0.8660254  0.8660254  0.6928203  0.5196152  0.5196152  0.6928203 #> [139]  1.2124356  1.2124356  1.0392305  0.8660254  0.8660254  1.0392305 #> [145]  1.5588457  1.5588457  1.3856406  1.2124356  1.2124356  1.3856406 #> [151]  0.3464102  0.3464102  0.1732051  0.0000000  0.0000000  0.1732051 #> [157]  0.6928203  0.6928203  0.5196152  0.3464102  0.3464102  0.5196152 #> [163]  1.0392305  1.0392305  0.8660254  0.6928203  0.6928203  0.8660254 #> [169]  1.3856406  1.3856406  1.2124356  1.0392305  1.0392305  1.2124356 #> [175]  1.7320508  1.7320508  1.5588457  1.3856406  1.3856406  1.5588457 #> [181]  0.1732051  0.1732051  0.0000000 -0.1732051 -0.1732051  0.0000000 #> [187]  0.5196152  0.5196152  0.3464102  0.1732051  0.1732051  0.3464102 #> [193]  0.8660254  0.8660254  0.6928203  0.5196152  0.5196152  0.6928203 #> [199]  1.2124356  1.2124356  1.0392305  0.8660254  0.8660254  1.0392305 #> [205]  1.5588457  1.5588457  1.3856406  1.2124356  1.2124356  1.3856406 #> [211]  0.3464102  0.3464102  0.1732051  0.0000000  0.0000000  0.1732051 #> [217]  0.6928203  0.6928203  0.5196152  0.3464102  0.3464102  0.5196152 #> [223]  1.0392305  1.0392305  0.8660254  0.6928203  0.6928203  0.8660254 #> [229]  1.3856406  1.3856406  1.2124356  1.0392305  1.0392305  1.2124356 #> [235]  1.7320508  1.7320508  1.5588457  1.3856406  1.3856406  1.5588457 #>  #> $full_grid_hex_poly_coordinates$y #>   [1]  0.09959292 -0.09959292 -0.19918584 -0.09959292  0.09959292  0.19918584 #>   [7]  0.09959292 -0.09959292 -0.19918584 -0.09959292  0.09959292  0.19918584 #>  [13]  0.09959292 -0.09959292 -0.19918584 -0.09959292  0.09959292  0.19918584 #>  [19]  0.09959292 -0.09959292 -0.19918584 -0.09959292  0.09959292  0.19918584 #>  [25]  0.09959292 -0.09959292 -0.19918584 -0.09959292  0.09959292  0.19918584 #>  [31]  0.39959292  0.20040708  0.10081416  0.20040708  0.39959292  0.49918584 #>  [37]  0.39959292  0.20040708  0.10081416  0.20040708  0.39959292  0.49918584 #>  [43]  0.39959292  0.20040708  0.10081416  0.20040708  0.39959292  0.49918584 #>  [49]  0.39959292  0.20040708  0.10081416  0.20040708  0.39959292  0.49918584 #>  [55]  0.39959292  0.20040708  0.10081416  0.20040708  0.39959292  0.49918584 #>  [61]  0.69959292  0.50040708  0.40081416  0.50040708  0.69959292  0.79918584 #>  [67]  0.69959292  0.50040708  0.40081416  0.50040708  0.69959292  0.79918584 #>  [73]  0.69959292  0.50040708  0.40081416  0.50040708  0.69959292  0.79918584 #>  [79]  0.69959292  0.50040708  0.40081416  0.50040708  0.69959292  0.79918584 #>  [85]  0.69959292  0.50040708  0.40081416  0.50040708  0.69959292  0.79918584 #>  [91]  0.99959292  0.80040708  0.70081416  0.80040708  0.99959292  1.09918584 #>  [97]  0.99959292  0.80040708  0.70081416  0.80040708  0.99959292  1.09918584 #> [103]  0.99959292  0.80040708  0.70081416  0.80040708  0.99959292  1.09918584 #> [109]  0.99959292  0.80040708  0.70081416  0.80040708  0.99959292  1.09918584 #> [115]  0.99959292  0.80040708  0.70081416  0.80040708  0.99959292  1.09918584 #> [121]  1.29959292  1.10040708  1.00081416  1.10040708  1.29959292  1.39918584 #> [127]  1.29959292  1.10040708  1.00081416  1.10040708  1.29959292  1.39918584 #> [133]  1.29959292  1.10040708  1.00081416  1.10040708  1.29959292  1.39918584 #> [139]  1.29959292  1.10040708  1.00081416  1.10040708  1.29959292  1.39918584 #> [145]  1.29959292  1.10040708  1.00081416  1.10040708  1.29959292  1.39918584 #> [151]  1.59959292  1.40040708  1.30081416  1.40040708  1.59959292  1.69918584 #> [157]  1.59959292  1.40040708  1.30081416  1.40040708  1.59959292  1.69918584 #> [163]  1.59959292  1.40040708  1.30081416  1.40040708  1.59959292  1.69918584 #> [169]  1.59959292  1.40040708  1.30081416  1.40040708  1.59959292  1.69918584 #> [175]  1.59959292  1.40040708  1.30081416  1.40040708  1.59959292  1.69918584 #> [181]  1.89959292  1.70040708  1.60081416  1.70040708  1.89959292  1.99918584 #> [187]  1.89959292  1.70040708  1.60081416  1.70040708  1.89959292  1.99918584 #> [193]  1.89959292  1.70040708  1.60081416  1.70040708  1.89959292  1.99918584 #> [199]  1.89959292  1.70040708  1.60081416  1.70040708  1.89959292  1.99918584 #> [205]  1.89959292  1.70040708  1.60081416  1.70040708  1.89959292  1.99918584 #> [211]  2.19959292  2.00040708  1.90081416  2.00040708  2.19959292  2.29918584 #> [217]  2.19959292  2.00040708  1.90081416  2.00040708  2.19959292  2.29918584 #> [223]  2.19959292  2.00040708  1.90081416  2.00040708  2.19959292  2.29918584 #> [229]  2.19959292  2.00040708  1.90081416  2.00040708  2.19959292  2.29918584 #> [235]  2.19959292  2.00040708  1.90081416  2.00040708  2.19959292  2.29918584 #>  #>  #> $nldr_data_with_hex_id #> $nldr_data_with_hex_id$UMAP1 #>  [1] 0.08044271 0.73857864 0.83992020 0.16719939 0.26292782 0.83820653 #>  [7] 0.73364820 0.62693057 0.80998347 0.90342138 0.64241759 0.05182936 #> [13] 0.96228699 0.07223295 0.64916340 0.80783543 0.13518498 0.80668446 #> [19] 0.60311661 0.16150976 0.71326033 0.09405763 0.08900367 0.77510396 #> [25] 0.79296306 0.28575187 0.46806684 0.57541142 0.21053454 0.62412077 #> [31] 0.76738169 0.76427076 0.64842247 0.03170275 0.96450414 0.10117880 #> [37] 0.71265285 0.82904448 0.81275032 0.00000000 0.38392618 0.82638316 #> [43] 0.29256853 0.84482412 0.79995094 0.69339205 0.13459287 0.04209521 #> [49] 0.94245034 0.05349536 0.68677026 0.77828853 0.75504949 0.23125328 #> [55] 0.76831122 0.69843891 0.72681720 0.99318862 0.96227596 0.39315580 #> [61] 0.74175661 0.94650462 0.50932690 1.00000000 0.33548077 0.25450458 #> [67] 0.88588122 0.72192354 0.68029522 0.92537063 0.80964667 0.49582819 #> [73] 0.16301062 0.29499615 0.91053035 #>  #> $nldr_data_with_hex_id$UMAP2 #>  [1] 0.274498327 0.859778569 0.929412446 0.037066861 0.341734583 1.720961652 #>  [7] 0.833935370 0.618409921 0.868291303 1.600664528 0.631646064 0.320865388 #> [13] 1.546732900 0.218331864 0.593427000 1.374772146 0.335559538 1.381019256 #> [19] 0.597381477 0.009905107 0.797282390 0.058760856 0.252258947 1.730112607 #> [25] 1.100876246 0.202379969 0.482713207 0.708486670 0.151933039 0.712391079 #> [31] 1.018811832 1.552630670 0.661926514 0.303630086 1.665355817 0.050909321 #> [37] 1.539719959 1.722765733 1.732050808 0.271778584 0.390190144 1.011632238 #> [43] 0.138015108 0.983163036 0.964486583 1.448210796 0.000000000 0.257916294 #> [49] 1.680924200 0.187982579 0.778563498 0.839937252 1.670893354 0.061042472 #> [55] 1.497157149 1.621642749 0.931757885 1.521102615 1.546125959 0.328235991 #> [61] 1.681926517 1.524113512 0.617404710 1.625538768 0.278688714 0.063074584 #> [67] 1.408512652 0.952956061 1.508729997 1.455380663 1.529334517 0.604985028 #> [73] 0.030266486 0.117297635 1.445460921 #>  #> $nldr_data_with_hex_id$hb_id #>  [1]  6 18 18  1  6 33 18 13 18 28 13  6 28  6 13 28  6 28 13  1 18  1  6 33 23 #> [26]  6 12 13  6 13 18 28 13  6 34  1 28 33 33  6  7 18  2 18 18 28  1  6 34  6 #> [51] 13 18 33  2 28 33 18 28 28  7 33 28 12 34  6  2 28 18 27 28 28 12  1  2 28 #>  #>  #> $hex_id_with_std_counts #> $hex_id_with_std_counts$hb_id #>  [1]  1  2  6  7 12 13 18 23 27 28 33 34 #>  #> $hex_id_with_std_counts$std_counts #>  [1] 0.40000000 0.26666667 0.86666667 0.13333333 0.20000000 0.53333333 #>  [7] 0.80000000 0.06666667 0.06666667 1.00000000 0.46666667 0.20000000 #>  #>  #> $total_hex_bins #> [1] 40 #>  #> $num_non_empty_bins #> [1] 12 #>  #> $points_in_hex_bins #> $points_in_hex_bins$hexID #>  [1]  6 18  1 33 13 28 23 12 34  7  2 27 #>  #> $points_in_hex_bins$pts_list #> $points_in_hex_bins$pts_list$`Points in hexID: 6` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $points_in_hex_bins$pts_list$`Points in hexID: 18` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $points_in_hex_bins$pts_list$`Points in hexID: 1` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $points_in_hex_bins$pts_list$`Points in hexID: 33` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $points_in_hex_bins$pts_list$`Points in hexID: 13` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $points_in_hex_bins$pts_list$`Points in hexID: 28` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $points_in_hex_bins$pts_list$`Points in hexID: 23` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $points_in_hex_bins$pts_list$`Points in hexID: 12` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $points_in_hex_bins$pts_list$`Points in hexID: 34` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $points_in_hex_bins$pts_list$`Points in hexID: 7` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $points_in_hex_bins$pts_list$`Points in hexID: 2` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $points_in_hex_bins$pts_list$`Points in hexID: 27` #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #>  #>"},{"path":"/reference/generate_scaled_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaling the 2D embeddings — generate_scaled_data","title":"Scaling the 2D embeddings — generate_scaled_data","text":"function scales 2D embeddings.","code":""},{"path":"/reference/generate_scaled_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaling the 2D embeddings — generate_scaled_data","text":"","code":"generate_scaled_data(nldr_df, x = \"UMAP1\", y = \"UMAP2\")"},{"path":"/reference/generate_scaled_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scaling the 2D embeddings — generate_scaled_data","text":"nldr_df data frame containing 2D embeddings. x name column contains first 2D embeddings component. y name column contains second 2D embeddings component.","code":""},{"path":"/reference/generate_scaled_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scaling the 2D embeddings — generate_scaled_data","text":"list contains scaled 2D embeddings.","code":""},{"path":"/reference/generate_scaled_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scaling the 2D embeddings — generate_scaled_data","text":"","code":"generate_scaled_data(nldr_df = s_curve_noise_umap, x = \"UMAP1\", y = \"UMAP2\") #> $scaled_UMAP1 #>  [1] 0.08044271 0.73857864 0.83992020 0.16719939 0.26292782 0.83820653 #>  [7] 0.73364820 0.62693057 0.80998347 0.90342138 0.64241759 0.05182936 #> [13] 0.96228699 0.07223295 0.64916340 0.80783543 0.13518498 0.80668446 #> [19] 0.60311661 0.16150976 0.71326033 0.09405763 0.08900367 0.77510396 #> [25] 0.79296306 0.28575187 0.46806684 0.57541142 0.21053454 0.62412077 #> [31] 0.76738169 0.76427076 0.64842247 0.03170275 0.96450414 0.10117880 #> [37] 0.71265285 0.82904448 0.81275032 0.00000000 0.38392618 0.82638316 #> [43] 0.29256853 0.84482412 0.79995094 0.69339205 0.13459287 0.04209521 #> [49] 0.94245034 0.05349536 0.68677026 0.77828853 0.75504949 0.23125328 #> [55] 0.76831122 0.69843891 0.72681720 0.99318862 0.96227596 0.39315580 #> [61] 0.74175661 0.94650462 0.50932690 1.00000000 0.33548077 0.25450458 #> [67] 0.88588122 0.72192354 0.68029522 0.92537063 0.80964667 0.49582819 #> [73] 0.16301062 0.29499615 0.91053035 #>  #> $scaled_UMAP2 #>  [1] 0.274498327 0.859778569 0.929412446 0.037066861 0.341734583 1.720961652 #>  [7] 0.833935370 0.618409921 0.868291303 1.600664528 0.631646064 0.320865388 #> [13] 1.546732900 0.218331864 0.593427000 1.374772146 0.335559538 1.381019256 #> [19] 0.597381477 0.009905107 0.797282390 0.058760856 0.252258947 1.730112607 #> [25] 1.100876246 0.202379969 0.482713207 0.708486670 0.151933039 0.712391079 #> [31] 1.018811832 1.552630670 0.661926514 0.303630086 1.665355817 0.050909321 #> [37] 1.539719959 1.722765733 1.732050808 0.271778584 0.390190144 1.011632238 #> [43] 0.138015108 0.983163036 0.964486583 1.448210796 0.000000000 0.257916294 #> [49] 1.680924200 0.187982579 0.778563498 0.839937252 1.670893354 0.061042472 #> [55] 1.497157149 1.621642749 0.931757885 1.521102615 1.546125959 0.328235991 #> [61] 1.681926517 1.524113512 0.617404710 1.625538768 0.278688714 0.063074584 #> [67] 1.408512652 0.952956061 1.508729997 1.455380663 1.529334517 0.604985028 #> [73] 0.030266486 0.117297635 1.445460921 #>"},{"path":"/reference/geom_trimesh.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a trimesh plot — geom_trimesh","title":"Create a trimesh plot — geom_trimesh","text":"Create trimesh plot","code":""},{"path":"/reference/geom_trimesh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a trimesh plot — geom_trimesh","text":"","code":"geom_trimesh(   mapping = NULL,   data = NULL,   stat = \"trimesh\",   position = \"identity\",   show.legend = NA,   na.rm = FALSE,   inherit.aes = TRUE,   ... )"},{"path":"/reference/geom_trimesh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a trimesh plot — geom_trimesh","text":"mapping Aesthetic mappings plot. data data plotted. stat statistical transformation applied. position position adjustment applied. show.legend Whether show legend layer. na.rm Whether remove missing values. inherit.aes Whether inherit aesthetics plot layer. ... Additional arguments passed `layer` function.","code":""},{"path":"/reference/geom_trimesh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a trimesh plot — geom_trimesh","text":"`ggplot2` layer object.","code":""},{"path":"/reference/geom_trimesh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a trimesh plot — geom_trimesh","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled,                                         x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,                                         y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. centroid_list <- generate_full_grid_centroids(nldr_df = s_curve_noise_umap_scaled,                                              x = \"UMAP1\", y = \"UMAP2\",                                              num_bins_x = num_bins_x,                                              num_bins_y = num_bins_y,                                              x_start = NA, y_start = NA,                                              buffer_x = NA,                                              buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. all_centroids_df <- as.data.frame(do.call(cbind, centroid_list)) s_curve_noise_umap_scaled_rm_id <- s_curve_noise_umap_scaled |> dplyr::select(-ID) nldr_with_hb_id_list <- assign_data(nldr_df = s_curve_noise_umap_scaled_rm_id, centroid_df = all_centroids_df) umap_with_hb_id <- as.data.frame(do.call(cbind, nldr_with_hb_id_list)) std_counts_list <- compute_std_counts(nldr_df_with_hex_id = umap_with_hb_id) counts_df <- as.data.frame(do.call(cbind, std_counts_list)) df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df, counts_df = counts_df) ggplot2::ggplot() + geom_trimesh(data = df_bin_centroids, mapping = ggplot2::aes(x = c_x, y = c_y))"},{"path":"/reference/map_hexbin_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Hexagon IDs to Centroids in the Full Grid — map_hexbin_id","title":"Map Hexagon IDs to Centroids in the Full Grid — map_hexbin_id","text":"function generates data frame hexagon IDs mapped centroids full grid.","code":""},{"path":"/reference/map_hexbin_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Hexagon IDs to Centroids in the Full Grid — map_hexbin_id","text":"","code":"map_hexbin_id(full_centroid_df, df_bin_centroids)"},{"path":"/reference/map_hexbin_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Hexagon IDs to Centroids in the Full Grid — map_hexbin_id","text":"full_centroid_df Data frame containing centroid coordinates full grid. df_bin_centroids Data frame containing hexagon IDs centroids.","code":""},{"path":"/reference/map_hexbin_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Hexagon IDs to Centroids in the Full Grid — map_hexbin_id","text":"data frame columns 'x', 'y', 'hexID', 'counts' representing hexagon centroids counts.","code":""},{"path":"/reference/map_hexbin_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Hexagon IDs to Centroids in the Full Grid — map_hexbin_id","text":"","code":"num_bins_x <- 4 shape_value <- 1.833091 hexbin_data_object <- extract_hexbin_centroids(nldr_df = s_curve_noise_umap, num_bins = num_bins_x, shape_val = shape_value) df_bin_centroids <- hexbin_data_object$hexdf_data full_centroid_df <- generate_full_grid_centroids(df_bin_centroids) map_hexbin_id(full_centroid_df, df_bin_centroids) #> # A tibble: 50 × 5 #>       c_x   c_y hexID counts std_counts #>     <dbl> <dbl> <int>  <int>      <dbl> #>  1 -3.27  -5.74     1      2      0.222 #>  2 -1.84  -5.74     2      6      0.667 #>  3 -0.407 -5.74     3     NA     NA     #>  4  1.02  -5.74     4     NA     NA     #>  5  2.46  -5.74     5     NA     NA     #>  6 -2.55  -4.38     6      7      0.778 #>  7 -1.12  -4.38     7      5      0.556 #>  8  0.308 -4.38     8     NA     NA     #>  9  1.74  -4.38     9     NA     NA     #> 10  3.17  -4.38    10     NA     NA     #> # ℹ 40 more rows"},{"path":"/reference/map_polygon_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Polygon ID to Hexagon Coordinates — map_polygon_id","title":"Map Polygon ID to Hexagon Coordinates — map_polygon_id","text":"function maps polygon IDs corresponding hexagon coordinates full grid.","code":""},{"path":"/reference/map_polygon_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Polygon ID to Hexagon Coordinates — map_polygon_id","text":"","code":"map_polygon_id(full_grid_with_hexbin_id, hex_grid)"},{"path":"/reference/map_polygon_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Polygon ID to Hexagon Coordinates — map_polygon_id","text":"full_grid_with_hexbin_id data frame containing hexagon IDs, centroids, standardized counts. hex_grid data frame containing coordinates hexagons.","code":""},{"path":"/reference/map_polygon_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Polygon ID to Hexagon Coordinates — map_polygon_id","text":"data frame hexagon information along mapped polygon IDs.","code":""},{"path":"/reference/map_polygon_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Polygon ID to Hexagon Coordinates — map_polygon_id","text":"","code":"num_bins_x <- 4 shape_value <- 1.833091 hexbin_data_object <- extract_hexbin_centroids(nldr_df = s_curve_noise_umap, num_bins = num_bins_x, shape_val = shape_value) df_bin_centroids <- hexbin_data_object$hexdf_data full_centroid_df <- generate_full_grid_centroids(df_bin_centroids) hex_grid <- full_hex_grid(full_centroid_df) full_grid_with_hexbin_id <- map_hexbin_id(full_centroid_df, df_bin_centroids) map_polygon_id(full_grid_with_hexbin_id, hex_grid) #>           c_x        c_y hexID counts std_counts polygon_id #> 1  -3.2703577 -5.7425405     1      2  0.2222222          1 #> 2  -1.8388696 -5.7425405     2      6  0.6666667          2 #> 3  -0.4073814 -5.7425405     3     NA         NA          3 #> 4   1.0241067 -5.7425405     4     NA         NA          4 #> 5   2.4555949 -5.7425405     5     NA         NA          5 #> 6  -2.5546137 -4.3768263     6      7  0.7777778         26 #> 7  -1.1231255 -4.3768263     7      5  0.5555556         27 #> 8   0.3083626 -4.3768263     8     NA         NA         28 #> 9   1.7398508 -4.3768263     9     NA         NA         29 #> 10  3.1713389 -4.3768263    10     NA         NA         30 #> 11 -3.2703577 -3.0111121    11      2  0.2222222          6 #> 12 -1.8388696 -3.0111121    12      2  0.2222222          7 #> 13 -0.4073814 -3.0111121    13      2  0.2222222          8 #> 14  1.0241067 -3.0111121    14     NA         NA          9 #> 15  2.4555949 -3.0111121    15     NA         NA         10 #> 16 -2.5546137 -1.6453979    16     NA         NA         31 #> 17 -1.1231255 -1.6453979    17      1  0.1111111         32 #> 18  0.3083626 -1.6453979    18      8  0.8888889         33 #> 19  1.7398508 -1.6453979    19     NA         NA         34 #> 20  3.1713389 -1.6453979    20     NA         NA         35 #> 21 -3.2703577 -0.2796838    21     NA         NA         11 #> 22 -1.8388696 -0.2796838    22     NA         NA         12 #> 23 -0.4073814 -0.2796838    23     NA         NA         13 #> 24  1.0241067 -0.2796838    24      7  0.7777778         14 #> 25  2.4555949 -0.2796838    25     NA         NA         15 #> 26 -2.5546137  1.0860304    26     NA         NA         36 #> 27 -1.1231255  1.0860304    27     NA         NA         37 #> 28  0.3083626  1.0860304    28      1  0.1111111         38 #> 29  1.7398508  1.0860304    29      6  0.6666667         39 #> 30  3.1713389  1.0860304    30     NA         NA         40 #> 31 -3.2703577  2.4517446    31     NA         NA         16 #> 32 -1.8388696  2.4517446    32     NA         NA         17 #> 33 -0.4073814  2.4517446    33     NA         NA         18 #> 34  1.0241067  2.4517446    34     NA         NA         19 #> 35  2.4555949  2.4517446    35     NA         NA         20 #> 36 -2.5546137  3.8174588    36     NA         NA         41 #> 37 -1.1231255  3.8174588    37     NA         NA         42 #> 38  0.3083626  3.8174588    38      2  0.2222222         43 #> 39  1.7398508  3.8174588    39      8  0.8888889         44 #> 40  3.1713389  3.8174588    40     NA         NA         45 #> 41 -3.2703577  5.1831729    41     NA         NA         21 #> 42 -1.8388696  5.1831729    42     NA         NA         22 #> 43 -0.4073814  5.1831729    43     NA         NA         23 #> 44  1.0241067  5.1831729    44      9  1.0000000         24 #> 45  2.4555949  5.1831729    45      7  0.7777778         25 #> 46 -2.5546137  6.5488871    46     NA         NA         46 #> 47 -1.1231255  6.5488871    47     NA         NA         47 #> 48  0.3083626  6.5488871    48     NA         NA         48 #> 49  1.7398508  6.5488871    49     NA         NA         49 #> 50  3.1713389  6.5488871    50     NA         NA         50"},{"path":"/reference/predict_2d_embeddings.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict 2D Embeddings — predict_2d_embeddings","title":"Predict 2D Embeddings — predict_2d_embeddings","text":"Given test dataset, centroid coordinates hexagonal bins  2D high-dimensional space, predict 2D embeddings data point test dataset.","code":""},{"path":"/reference/predict_2d_embeddings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict 2D Embeddings — predict_2d_embeddings","text":"","code":"predict_2d_embeddings(test_data, df_bin_centroids, df_bin, type_NLDR = \"UMAP\")"},{"path":"/reference/predict_2d_embeddings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict 2D Embeddings — predict_2d_embeddings","text":"test_data test dataset containing high-dimensional coordinates unique identifier. df_bin_centroids Centroid coordinates hexagonal bins 2D space. df_bin Centroid coordinates hexagonal bins high dimensions. type_NLDR type non-linear dimensionality reduction (NLDR) used. Default \"UMAP\".","code":""},{"path":"/reference/predict_2d_embeddings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict 2D Embeddings — predict_2d_embeddings","text":"list contains predicted 2D embeddings, ID test data, predicted hexagonal IDs.","code":""},{"path":"/reference/predict_2d_embeddings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict 2D Embeddings — predict_2d_embeddings","text":"","code":"training_data <- s_curve_noise_training num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,  y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. hex_bin_obj <- generate_hex_binning_info(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x, num_bins_y = num_bins_y, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. all_centroids_df <- as.data.frame(do.call(cbind, hex_bin_obj$full_grid_hex_centroids)) counts_df <- as.data.frame(do.call(cbind, hex_bin_obj$hex_id_with_std_counts)) df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df, counts_df = counts_df) UMAP_data_with_hb_id <- hex_bin_obj$nldr_data_with_hex_id df_all <- dplyr::bind_cols(training_data |> dplyr::select(-ID), UMAP_data_with_hb_id) df_bin <- avg_highD_data(df_all, column_start_text = \"x\") predict_2d_embeddings(test_data = s_curve_noise_training, df_bin_centroids = df_bin_centroids, df_bin = df_bin, type_NLDR = \"UMAP\") #> $pred_UMAP_1 #>  [1] 0.1732051 0.8660254 0.8660254 0.0000000 0.5196152 0.6928203 0.8660254 #>  [8] 0.6928203 0.8660254 1.0392305 0.6928203 0.1732051 0.8660254 0.1732051 #> [15] 0.6928203 0.5196152 0.1732051 0.8660254 0.6928203 0.0000000 0.6928203 #> [22] 0.0000000 0.1732051 0.6928203 0.6928203 0.3464102 0.3464102 0.6928203 #> [29] 0.3464102 0.6928203 0.6928203 0.8660254 0.6928203 0.1732051 1.0392305 #> [36] 0.0000000 0.5196152 0.6928203 0.6928203 0.1732051 0.5196152 0.8660254 #> [43] 0.3464102 0.8660254 0.8660254 0.5196152 0.0000000 0.1732051 1.0392305 #> [50] 0.1732051 0.6928203 0.8660254 0.6928203 0.3464102 0.8660254 0.6928203 #> [57] 0.8660254 0.8660254 1.0392305 0.5196152 0.6928203 0.8660254 0.3464102 #> [64] 1.0392305 0.5196152 0.3464102 0.8660254 0.8660254 0.5196152 0.8660254 #> [71] 0.8660254 0.3464102 0.0000000 0.3464102 0.8660254 #>  #> $pred_UMAP_2 #>  [1] 0.3 0.9 0.9 0.0 0.3 1.8 0.9 0.6 0.9 1.8 0.6 0.3 1.5 0.3 0.6 1.5 0.3 1.5 0.6 #> [20] 0.0 0.6 0.0 0.3 1.8 1.2 0.0 0.6 0.6 0.0 0.6 1.2 1.5 0.6 0.3 1.8 0.0 1.5 1.8 #> [39] 1.8 0.3 0.3 0.9 0.0 0.9 0.9 1.5 0.0 0.3 1.8 0.3 0.6 0.9 1.8 0.0 1.5 1.8 0.9 #> [58] 1.5 1.8 0.3 1.8 1.5 0.6 1.8 0.3 0.0 1.5 0.9 1.5 1.5 1.5 0.6 0.0 0.0 1.5 #>  #> $ID #>  [1]   1   2   3   4   6   7   8   9  11  12  14  15  16  17  19  20  21  22  23 #> [20]  24  25  26  31  33  34  35  37  38  39  40  41  42  43  44  45  46  47  51 #> [39]  52  54  55  56  57  59  60  62  63  64  65  66  67  69  70  71  72  73  74 #> [58]  75  76  77  78  79  80  81  84  87  89  91  93  94  95  96  97  99 100 #>  #> $pred_hb_id #>  [1]  6 18 18  1  7 33 18 13 18 34 13  6 28  6 13 27  6 28 13  1 13  1  6 33 23 #> [26]  2 12 13  2 13 23 28 13  6 34  1 27 33 33  6  7 18  2 18 18 27  1  6 34  6 #> [51] 13 18 33  2 28 33 18 28 34  7 33 28 12 34  7  2 28 18 27 28 28 12  1  2 28 #>"},{"path":"/reference/predict_hex_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Hexagonal IDs — predict_hex_id","title":"Predict Hexagonal IDs — predict_hex_id","text":"function predicts hexagonal IDs test set based existing bin centroids.","code":""},{"path":"/reference/predict_hex_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Hexagonal IDs — predict_hex_id","text":"","code":"predict_hex_id(df_bin_centroids, nldr_df_test, x = \"UMAP1\", y = \"UMAP2\")"},{"path":"/reference/predict_hex_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Hexagonal IDs — predict_hex_id","text":"df_bin_centroids training dataset containing high-dimensional data IDs. nldr_df_test non-linear dimensionality reductions need find prediction. x name column contains first 2D embeddings component. y name column contains second 2D embeddings component.","code":""},{"path":"/reference/predict_hex_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Hexagonal IDs — predict_hex_id","text":"data frame containing prediced hexID 2D embedding data","code":""},{"path":"/reference/predict_hex_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Hexagonal IDs — predict_hex_id","text":"","code":"num_bins_x <- 4 shape_value <- 1.833091 hexbin_data_object <- extract_hexbin_mean(nldr_df = s_curve_noise_umap, num_bins_x, shape_val = shape_value) df_bin_centroids <- hexbin_data_object$hexdf_data predict_hex_id(df_bin_centroids = df_bin_centroids, nldr_df_test = s_curve_noise_umap, x = \"UMAP1\", y = \"UMAP2\") #> # A tibble: 75 × 4 #>     UMAP1    UMAP2    ID pred_hb_id #>     <dbl>    <dbl> <int>      <dbl> #>  1 -2.81  -3.91        1          6 #>  2  0.959 -0.00271     2         24 #>  3  1.54   0.462       3         29 #>  4 -2.31  -5.50        4          2 #>  5 -1.76  -3.46        6         12 #>  6  1.53   5.75        7         44 #>  7  0.930 -0.175       8         24 #>  8  0.319 -1.61        9         18 #>  9  1.37   0.0541     11         24 #> 10  1.90   4.94       12         45 #> # ℹ 65 more rows"},{"path":"/reference/remove_long_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Long Edges from a Triangular Mesh Plot — remove_long_edges","title":"Remove Long Edges from a Triangular Mesh Plot — remove_long_edges","text":"function removes long edges triangular mesh plot based benchmark value.","code":""},{"path":"/reference/remove_long_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Long Edges from a Triangular Mesh Plot — remove_long_edges","text":"","code":"remove_long_edges(   distance_edges,   benchmark_value,   tr_from_to_df_coord,   distance_col )"},{"path":"/reference/remove_long_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Long Edges from a Triangular Mesh Plot — remove_long_edges","text":"distance_edges data frame containing edge information. benchmark_value threshold value determine long edges. tr_from_to_df_coord data frame containing columns x y coordinates start end points. distance_col column name `distance_edges` representing distances.","code":""},{"path":"/reference/remove_long_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Long Edges from a Triangular Mesh Plot — remove_long_edges","text":"ggplot object triangular mesh plot long edges removed.","code":""},{"path":"/reference/remove_long_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Long Edges from a Triangular Mesh Plot — remove_long_edges","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled,                                         x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,                                         y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. centroid_list <- generate_full_grid_centroids(nldr_df = s_curve_noise_umap_scaled,                                              x = \"UMAP1\", y = \"UMAP2\",                                              num_bins_x = num_bins_x,                                              num_bins_y = num_bins_y,                                              x_start = NA, y_start = NA,                                              buffer_x = NA,                                              buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. all_centroids_df <- as.data.frame(do.call(cbind, centroid_list)) s_curve_noise_umap_scaled_rm_id <- s_curve_noise_umap_scaled |> dplyr::select(-ID) nldr_with_hb_id_list <- assign_data(nldr_df = s_curve_noise_umap_scaled_rm_id, centroid_df = all_centroids_df) umap_with_hb_id <- as.data.frame(do.call(cbind, nldr_with_hb_id_list)) std_counts_list <- compute_std_counts(nldr_df_with_hex_id = umap_with_hb_id) counts_df <- as.data.frame(do.call(cbind, std_counts_list)) df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df,  counts_df = counts_df) tr1_object <- triangulate_bin_centroids(hex_bin_df = df_bin_centroids, x = \"c_x\", y = \"c_y\") tr_from_to_df <- generate_edge_info(triangular_object = tr1_object) distance_df <- cal_2d_dist(tr_from_to_df_coord = tr_from_to_df, start_x = \"x_from\", start_y = \"y_from\", end_x = \"x_to\", end_y = \"y_to\", select_col_vec = c(\"from\", \"to\", \"distance\")) remove_long_edges(distance_edges = distance_df, benchmark_value = 0.75, tr_from_to_df_coord = tr_from_to_df, distance_col = \"distance\")"},{"path":"/reference/s_curve_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"S-curve dataset with noise dimensions — s_curve_noise","title":"S-curve dataset with noise dimensions — s_curve_noise","text":"`s_curve_noise` dataset contains 3-dimensional S-curve added noise dimensions. data point represented seven dimensions (x1 x7) ID.","code":""},{"path":"/reference/s_curve_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S-curve dataset with noise dimensions — s_curve_noise","text":"","code":"data(s_curve_noise)"},{"path":"/reference/s_curve_noise.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"S-curve dataset with noise dimensions — s_curve_noise","text":"data frame 100 rows 8 columns: ID Identification number x1, x2, x3, x4, x5, x6, x7 High-dimensional coordinates","code":""},{"path":"/reference/s_curve_noise.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"S-curve dataset with noise dimensions — s_curve_noise","text":"dataset generated illustrative purposes.","code":""},{"path":"/reference/s_curve_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S-curve dataset with noise dimensions — s_curve_noise","text":"","code":"# Load the s_curve_noise dataset data(s_curve_noise)  # Display the first few rows of the dataset head(s_curve_noise) #> # A tibble: 6 × 8 #>        x1     x2       x3       x4        x5       x6       x7    ID #>     <dbl>  <dbl>    <dbl>    <dbl>     <dbl>    <dbl>    <dbl> <int> #> 1 -0.120  0.114  -1.99    -0.00246 -0.0178   -0.0181  -0.00317     1 #> 2 -0.0492 0.822   0.00121  0.0161   0.00968  -0.0834   0.00230     2 #> 3 -0.774  0.243   0.367   -0.0198   0.00408  -0.0349  -0.00911     3 #> 4 -0.606  1.96   -1.80     0.0132  -0.000479 -0.00478 -0.00843     4 #> 5 -0.478  1.61   -1.88     0.0101  -0.00746   0.0101   0.00972     5 #> 6  0.818  0.0388 -1.58     0.00253  0.00167   0.0781  -0.00771     6"},{"path":"/reference/s_curve_noise_test.html","id":null,"dir":"Reference","previous_headings":"","what":"S-curve dataset with noise dimensions for test — s_curve_noise_test","title":"S-curve dataset with noise dimensions for test — s_curve_noise_test","text":"`s_curve_noise_test` dataset contains test data dimensions x1, x2, x3, x4, x5, x6, x7. data point identified ID.","code":""},{"path":"/reference/s_curve_noise_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S-curve dataset with noise dimensions for test — s_curve_noise_test","text":"","code":"data(s_curve_noise_test)"},{"path":"/reference/s_curve_noise_test.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"S-curve dataset with noise dimensions for test — s_curve_noise_test","text":"data frame 25 rows 8 columns: ID Identification number x1, x2, x3, x4, x5, x6, x7 High-dimensional coordinates","code":""},{"path":"/reference/s_curve_noise_test.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"S-curve dataset with noise dimensions for test — s_curve_noise_test","text":"dataset generated training purposes.","code":""},{"path":"/reference/s_curve_noise_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S-curve dataset with noise dimensions for test — s_curve_noise_test","text":"","code":"# Load the s_curve_noise_test dataset data(s_curve_noise_test)  # Display the first few rows of the dataset head(s_curve_noise_test) #> # A tibble: 6 × 8 #>        x1    x2     x3       x4       x5       x6       x7    ID #>     <dbl> <dbl>  <dbl>    <dbl>    <dbl>    <dbl>    <dbl> <int> #> 1 -0.478   1.61 -1.88   0.0101  -0.00746  0.0101   0.00972     5 #> 2 -0.727   1.66  0.314  0.00269  0.0196   0.0559  -0.00481    10 #> 3  0.513   1.86  1.86  -0.00648 -0.0127   0.00635 -0.00770    13 #> 4  0.0635  1.48 -2.00   0.00458  0.0164  -0.0627  -0.00371    18 #> 5  0.918   1.36 -1.40   0.0161   0.0160  -0.0190   0.00341    27 #> 6  0.654   1.53 -1.76  -0.00906 -0.00186 -0.0831  -0.00323    28"},{"path":"/reference/s_curve_noise_training.html","id":null,"dir":"Reference","previous_headings":"","what":"S-curve dataset with noise dimensions for training — s_curve_noise_training","title":"S-curve dataset with noise dimensions for training — s_curve_noise_training","text":"`s_curve_noise_training` dataset contains training data dimensions x1, x2, x3, x4, x5, x6, x7. data point identified ID.","code":""},{"path":"/reference/s_curve_noise_training.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S-curve dataset with noise dimensions for training — s_curve_noise_training","text":"","code":"data(s_curve_noise_training)"},{"path":"/reference/s_curve_noise_training.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"S-curve dataset with noise dimensions for training — s_curve_noise_training","text":"data frame 75 rows 8 columns: ID Identification number x1, x2, x3, x4, x5, x6, x7 High-dimensional coordinates","code":""},{"path":"/reference/s_curve_noise_training.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"S-curve dataset with noise dimensions for training — s_curve_noise_training","text":"dataset generated training purposes.","code":""},{"path":"/reference/s_curve_noise_training.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S-curve dataset with noise dimensions for training — s_curve_noise_training","text":"","code":"# Load the s_curve_noise_training dataset data(s_curve_noise_training)  # Display the first few rows of the dataset head(s_curve_noise_training) #> # A tibble: 6 × 8 #>        x1     x2       x3       x4        x5       x6       x7    ID #>     <dbl>  <dbl>    <dbl>    <dbl>     <dbl>    <dbl>    <dbl> <int> #> 1 -0.120  0.114  -1.99    -0.00246 -0.0178   -0.0181  -0.00317     1 #> 2 -0.0492 0.822   0.00121  0.0161   0.00968  -0.0834   0.00230     2 #> 3 -0.774  0.243   0.367   -0.0198   0.00408  -0.0349  -0.00911     3 #> 4 -0.606  1.96   -1.80     0.0132  -0.000479 -0.00478 -0.00843     4 #> 5  0.818  0.0388 -1.58     0.00253  0.00167   0.0781  -0.00771     6 #> 6  0.910  1.55    1.42     0.0124   0.0160   -0.00248 -0.00832     7"},{"path":"/reference/s_curve_noise_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap","title":"UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap","text":"`s_curve_noise_umap` dataset contains UMAP (Uniform Manifold Approximation Projection) embeddings three-dimensional S-curve added noise. data point represented two UMAP coordinates (UMAP1 UMAP2) ID.","code":""},{"path":"/reference/s_curve_noise_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap","text":"","code":"data(s_curve_noise_umap)"},{"path":"/reference/s_curve_noise_umap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap","text":"## `s_curve_noise_umap` data frame 75 rows 3 columns: UMAP1 Numeric, first UMAP 2D embeddings. UMAP2 Numeric, second UMAP 2D embeddings. ID Numeric, identifier data point.","code":""},{"path":"/reference/s_curve_noise_umap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap","text":"dataset generated illustrative purposes.","code":""},{"path":"/reference/s_curve_noise_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap","text":"","code":"# Load the s_curve_noise_umap dataset data(s_curve_noise_umap)  # Display the first few rows of the dataset head(s_curve_noise_umap) #> # A tibble: 6 × 3 #>    UMAP1    UMAP2    ID #>    <dbl>    <dbl> <int> #> 1 -2.81  -3.91        1 #> 2  0.959 -0.00271     2 #> 3  1.54   0.462       3 #> 4 -2.31  -5.50        4 #> 5 -1.76  -3.46        6 #> 6  1.53   5.75        7"},{"path":"/reference/s_curve_noise_umap_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicted UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap_predict","title":"Predicted UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap_predict","text":"`s_curve_noise_umap_predict` dataset contains predicted UMAP (Uniform Manifold Approximation Projection) embeddings three-dimensional S-curve added noise. data point represented two UMAP coordinates (UMAP1 UMAP2) ID.","code":""},{"path":"/reference/s_curve_noise_umap_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicted UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap_predict","text":"","code":"data(s_curve_noise_umap_predict)"},{"path":"/reference/s_curve_noise_umap_predict.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Predicted UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap_predict","text":"## `s_curve_noise_umap_predict` data frame 75 rows 3 columns: UMAP1 Numeric, predicted first UMAP 2D embeddings. UMAP2 Numeric, predicted second UMAP 2D embeddings. ID Numeric, identifier data point.","code":""},{"path":"/reference/s_curve_noise_umap_predict.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Predicted UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap_predict","text":"dataset generated illustrative purposes.","code":""},{"path":"/reference/s_curve_noise_umap_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicted UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap_predict","text":"","code":"# Load the s_curve_noise_umap_predict dataset data(s_curve_noise_umap_predict)  # Display the first few rows of the dataset head(s_curve_noise_umap_predict) #> # A tibble: 6 × 3 #>    UMAP1  UMAP2    ID #>    <dbl>  <dbl> <int> #> 1 -2.23  -5.98      5 #> 2  0.813  0.910    10 #> 3  2.78   3.91     13 #> 4 -1.20  -5.31     18 #> 5 -0.928 -4.04     27 #> 6 -2.37  -6.45     28"},{"path":"/reference/s_curve_noise_umap_scaled.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaled UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap_scaled","title":"Scaled UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap_scaled","text":"`s_curve_noise_umap_scaled` dataset contains scaled UMAP (Uniform Manifold Approximation Projection) embeddings.","code":""},{"path":"/reference/s_curve_noise_umap_scaled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaled UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap_scaled","text":"","code":"data(s_curve_noise_umap_scaled)"},{"path":"/reference/s_curve_noise_umap_scaled.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scaled UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap_scaled","text":"## `s_curve_noise_umap_scaled` data frame 25 rows 3 columns: UMAP1 Numeric, Scaled first UMAP 2D embeddings. UMAP2 Numeric, Scaled second UMAP 2D embedding. ID Numeric, identifier data point.","code":""},{"path":"/reference/s_curve_noise_umap_scaled.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Scaled UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap_scaled","text":"dataset generated illustrative purposes.","code":""},{"path":"/reference/s_curve_noise_umap_scaled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scaled UMAP embedding for S-curve dataset which with noise dimensions — s_curve_noise_umap_scaled","text":"","code":"# Load the s_curve_noise_umap_scaled dataset data(s_curve_noise_umap_scaled)  # Display the first few rows of the dataset head(s_curve_noise_umap_scaled) #> # A tibble: 6 × 3 #>    UMAP1  UMAP2    ID #>    <dbl>  <dbl> <int> #> 1 0.0804 0.274      1 #> 2 0.739  0.860      2 #> 3 0.840  0.929      3 #> 4 0.167  0.0371     4 #> 5 0.263  0.342      6 #> 6 0.838  1.72       7"},{"path":"/reference/show_langevitour.html","id":null,"dir":"Reference","previous_headings":"","what":"Show LangeviTour Visualization — show_langevitour","title":"Show LangeviTour Visualization — show_langevitour","text":"function generates LangeviTour visualization based different conditions input parameters.","code":""},{"path":"/reference/show_langevitour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show LangeviTour Visualization — show_langevitour","text":"","code":"show_langevitour(   df,   df_b,   df_b_with_center_data,   benchmark_value = NA,   distance_df,   distance_col,   use_default_benchmark_val = FALSE,   column_start_text = \"x\" )"},{"path":"/reference/show_langevitour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show LangeviTour Visualization — show_langevitour","text":"df data frame containing high-dimensional data. df_b data frame containing high-dimensional coordinates bin centroids/ means. df_b_with_center_data dataset hexbin centroids/ means. benchmark_value benchmark value used remove long edges (optional). distance_df distance dataframe. distance_col name distance column. use_default_benchmark_val Logical, indicating whether use default benchmark value  remove long edges(default FALSE). column_start_text text begin column name high-D data","code":""},{"path":"/reference/show_langevitour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show LangeviTour Visualization — show_langevitour","text":"langevitour object model high-dimensional data.","code":""},{"path":"/reference/show_langevitour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show LangeviTour Visualization — show_langevitour","text":"","code":"training_data <- s_curve_noise_training num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,  y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. hex_bin_obj <- generate_hex_binning_info(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x, num_bins_y = num_bins_y, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. all_centroids_df <- as.data.frame(do.call(cbind, hex_bin_obj$full_grid_hex_centroids)) counts_df <- as.data.frame(do.call(cbind, hex_bin_obj$hex_id_with_std_counts)) df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df, counts_df = counts_df) UMAP_data_with_hb_id <- as.data.frame(do.call(cbind, hex_bin_obj$nldr_data_with_hex_id)) df_all <- dplyr::bind_cols(training_data |> dplyr::select(-ID), UMAP_data_with_hb_id) df_bin <- avg_highD_data(df_all, column_start_text = \"x\") tr1_object <- triangulate_bin_centroids(hex_bin_df = df_bin_centroids, x = \"c_x\", y = \"c_y\") tr_from_to_df <- generate_edge_info(triangular_object = tr1_object) distance_df <- cal_2d_dist(tr_from_to_df_coord = tr_from_to_df, start_x = \"x_from\", start_y = \"y_from\", end_x = \"x_to\", end_y = \"y_to\", select_col_vec = c(\"from\", \"to\", \"distance\")) show_langevitour(df = df_all, df_b = df_bin, df_b_with_center_data = df_bin_centroids, benchmark_value = 0.75, distance = distance_df, distance_col = \"distance\", use_default_benchmark_val = FALSE, column_start_text = \"x\")  {\"x\":{\"X\":[[-0.7532540102523092,1.622099217182646,-1.563136527633857,0.006873918237785499,0.002767239543609322,-0.01756306606500099,-0.0005622575067294143],[0.2133503246179372,1.669969738228247,-1.913978828773121,0.007143189560156313,-0.006719770871568472,-0.002131106308661403,-0.0004907022137194866],[-0.02905970046788694,0.4031874554661604,-1.868072310118725,0.003703152631910947,-0.0004535667333178798,-0.02090539979891708,-0.001768609814417477],[0.9428196088260665,0.7569025105331093,-1.321293357739128,-0.00720245265867561,-0.003193646944127977,0.05722446364816279,0.002300787772983314],[0.7988648146259906,0.5271568084135652,-0.4760898836404,0.003275267174467445,0.004897054011623063,-0.002455006834740439,-0.0007860097599526246],[0.6602466157329906,1.513145221979357,-0.3306725972826951,-0.0004407444444950678,0.0007573102391324939,0.02742657965281978,0.002009116948465817],[-0.4519746737340984,1.07208387045345,0.2464132666185228,0.003553593743126839,0.001645875693454096,0.004567991193228711,0.001209053125154848],[-0.9877624785883902,1.641162267420441,1.155965656132752,0.007536486880853774,-0.01041420752182603,-0.001287345401942724,0.004885401120409369],[-0.5567171905484987,1.517617604229599,1.830702094464548,0.00998115778900683,0.001981508452445269,-0.09356778985820711,-0.004169277199544012],[0.02330689139857518,0.7489022593013942,1.843545730345224,-0.002760710973292589,0.003965952118858695,-0.007506785007814566,-0.001324894237642487],[0.6887864634766356,1.739638188122106,1.636201792927429,0.002095087740038123,0.003701196843758226,-0.005320822381015339,-0.0006343627814203502],[0.9844908758498737,0.8093663530113796,1.146425500297224,0.004366712026918929,-0.001909951266522209,0.02101390563572447,0.0003728960982213415],[-0.1197023178065582,0.113792406860739,-1.992809828271124,-0.002456044023856522,-0.01784079583361745,-0.01808623922988772,-0.003171075587160886],[-0.0492116042517944,0.8220879388973117,0.001211625014104989,0.01609337089583278,0.00968077441677451,-0.08343418091535569,0.002297011534683407],[-0.7744665799532017,0.2427505156956613,0.3673851752167113,-0.01978262230753899,0.004081092849373819,-0.03491700901649893,-0.009109519375488161],[-0.605666542015041,1.955211671534926,-1.795718568266157,0.01320253456942737,-0.0004790821298956867,-0.004777390137314791,-0.008429164872504771],[0.8176968362154114,0.03884110366925597,-1.575649098013109,0.002531742099672555,0.001669642822816966,0.07809454780071975,-0.007713085878640414],[0.9097854748891188,1.545365225058049,1.41507877527137,0.01241262594237924,0.01595441317185759,-0.002476282930001614,-0.008323180521838367],[-0.06909471948867207,0.9778062053956091,0.002389895931891761,0.01149556647054851,0.003501960895955562,0.08979931799694896,0.003588037989102304],[0.8587949259751909,1.550877413712442,-0.4876804950821545,-0.007532569887116551,-0.01232518271543086,0.03361516986042262,-0.006647086627781391],[-0.04000853201160378,0.285694460850209,0.0008006618465580262,0.01229444337077439,0.006128841787576677,-0.01208525500260293,-0.0003467381233349439],[0.7645931125736385,0.8978979648090899,1.644513283187364,-0.01781048127450049,0.01511456467211246,-0.07103415336459876,-0.006237484002485871],[0.8690838830036821,1.89448675699532,-0.5053352607035324,-0.00969649019651115,-0.01092765353620052,0.06268691425211728,-0.00637299251742661],[-0.21574119245528,0.005439772736281157,-1.976450581380325,0.0142350376304239,0.003275272473692893,-0.04695592615753413,-0.003066407875157892],[0.6310567483288222,0.3187438533641398,1.775736669488206,-0.01507605879567564,-0.003403699891641736,0.009811364347115159,-0.004201206830330193],[-0.7369476486027037,0.3939202860929072,-1.675949823003857,-0.01648814219981432,-0.002606530888006092,-0.003548323409631848,0.00868619106709957],[0.8796178586592863,1.44872500281781,-0.5243189905749319,0.006571143148466945,0.007987539032474161,0.08633720627985894,0.00671645862516016],[-0.7952262014161802,0.8465155172161758,1.606312863611842,-0.005243184249848128,-0.006937161590903998,0.03476686854846775,-0.008627067501656711],[0.3253136772079682,0.08209710754454136,-1.945606160841515,0.002920698318630458,0.01973505788482726,-0.01647985558956862,-0.0008810718590393663],[-0.7165527877519886,0.6582454415038228,1.697532868304321,-0.005879403855651617,-0.01351311537437141,-0.06674369750544429,0.002097280072048307],[0.9234537101989614,1.388528215698898,-0.6162901550392892,-0.01991516638547182,-0.003163206167519094,0.04198158206418157,0.007973243654705585],[-0.5377426491872626,1.728797066025436,-1.843109034019364,-0.001814628830179573,-0.008652214193716645,0.06364196431823074,-0.005679561449214816],[0.05933827471454893,1.498560781590641,-0.001762067864629402,0.003225852251052857,-0.003309094160795212,-0.04299618871882558,0.008905351790599524],[-0.991030643149985,1.224980012513697,-1.133634817086443,-0.004675818765535951,0.003577143540605902,0.01255110395140946,0.006600025072693824],[-0.1861786824700141,0.5317263915203512,-1.982515902259973,0.01891433794051409,0.009723528334870935,-0.01120753260329366,-0.009002428255043923],[0.7839472561253783,1.798594639170915,1.620827431428002,-0.01375496675260365,0.01152768964879215,-0.09294880782254041,0.007437041532248259],[-0.9877624785883902,1.641162267420441,1.155965656132752,0.007536486880853774,-0.01041420752182603,-0.001287345401942724,0.004885401120409369],[0.433348489058377,1.092386058531702,-1.901226434937869,0.01496939869597554,-0.005910785133019091,-0.03004904785193503,-0.008490698081441223],[0.9884270157109178,0.6726851873099804,-0.8483028193643372,0.01770133469253779,-0.008895844155922532,0.01144544272683561,0.004604015960358082],[0.5673695629952656,0.9754723845981061,-0.1765367166736811,0.01048573954030872,0.01451877978630364,0.0656953643541783,0.0007527549657970669],[0.001613062513890556,1.141913326457143,-1.999998699013817,0.002061855597421527,-0.009399711433798075,-0.09735803282819688,-0.007957530929706991],[0.5284660736216374,1.256235462147743,-0.1510455789437632,-0.004862688081339002,0.01219985631294549,0.01774367783218622,0.008759060315787793],[-0.9192865602828448,1.908800283446908,0.6064111026930059,0.003250973364338279,0.005866982303559781,0.01696341810747981,0.006150341327302159],[0.1715448590034898,1.293902121949941,1.98517630977885,0.01895034153014421,-0.0103924208227545,-0.03443690477870405,0.005899244402535258],[0.5735601453699476,1.786181385628879,-0.1808365488846536,0.01358028982765972,0.01123918103985488,-0.08194785779342056,-0.004726352072320879],[-0.1333317859477973,0.1068887333385646,-1.991071457996834,-0.01016317698173225,-0.00686354904435575,0.06926465928554534,0.0008533836156129834],[0.9915170923575689,0.7123245168477297,1.129976365400761,-0.01415088371373713,0.01993690346367657,0.008037336869165301,-0.0006445553386583928],[-0.9820826023310634,1.531668600160629,-1.188450954358545,0.007797487536445259,0.0187660148087889,-0.0711681082379073,-0.003897326164878905],[-0.1682861029646465,1.564343654550612,1.985738194222468,-0.01051571825519204,0.01881474533118308,-0.05003839256241918,0.007434551962651312],[0.9241898377766503,1.615002839826047,1.38193342842748,-0.001848454587161541,0.01420026941224933,0.0655828604940325,-0.003038239316083491],[0.8861986206760416,1.815221319906414,1.463305519837484,-0.01058333173394203,-0.01420797175727785,0.03666314189322292,-0.003377324095927179],[-0.6705395437443553,0.09221442090347409,-1.741873789990664,-0.004577504023909568,0.01269964696839452,-0.06134196990169585,-0.006428927667438984],[0.9714202415284989,0.4316921974532306,-1.237366203046501,-0.01484817842021584,0.002977977637201548,0.02997732455842197,0.008207388571463527],[-0.94970918263747,1.162171045318246,0.6868666922633926,-0.01154084778390825,-0.01876744877547026,0.04989686403423549,0.001299429908394814],[0.6529289191697736,1.816962864249945,-1.757419188106422,0.01694055799394846,-0.008701400151476264,-0.02093007229268551,0.005636560432612897],[-0.9444793856638395,0.7088241651654243,0.671429322586363,-0.01845525301992893,0.006392535110935568,0.04459443199448287,-0.00942277990281582],[-0.7667273413661088,1.100609884597361,0.3580271158361448,0.007469149697571995,0.01440265277400613,0.0918103175237775,0.006428735754452646],[-0.6687537548980977,1.859420036897063,1.743483971118204,0.01388056396506727,-0.01033901311457157,0.09252983233891429,-0.0008464401448145514],[-0.7531642356278754,1.611115401145071,-1.657832527449866,0.01327758495695889,0.01516301633790136,-0.05896217459812761,0.002600554693490267],[-0.457547805667916,0.2718108175322413,-1.889185023225467,-0.009001289987936615,-0.01530766806565225,-0.08373592896386982,0.008302827947773041],[0.999248822746012,0.9556511933915317,1.038752938478379,0.01862290269695223,-0.01486700435169041,0.03237823029048742,-0.002774710613302886],[-0.208598430979825,0.452930883038789,-1.978001377602688,0.01851549057289958,0.01892724903300405,-0.09993706536479295,-0.004122804002836346],[0.08162676603995347,1.804655154235661,-0.003337032359554959,0.007843786478042604,-0.01347083183936775,-0.006699419626966116,0.009617849243804813],[0.02368077018478244,0.911248822696507,-0.0002804287584164955,0.01328401782549917,-0.01037446448579431,0.05409847060218453,0.001980910394340753],[0.6013315669453742,1.713736021425575,1.798999591110672,0.01444809211418032,-0.0173884444590658,-0.05815184363164008,0.004745859722606837],[-0.2141821398036551,1.449222731404006,-1.976793740248742,-0.009661938110366464,-0.00369591566734016,0.05725041176192464,0.0003073741309344777],[-0.2474142400793769,1.084453500341624,1.968909796526975,-0.01153929647058249,0.00796187567524612,-0.05935494676232338,0.007615797067992388],[0.08658018225935261,1.956601427868009,1.996244885577807,0.01593304134905338,0.01251873926259578,0.09305229093879461,-0.004764181794598699],[-0.4874693083705027,1.330214543733746,0.126859877570167,0.009365039244294167,0.01701790347695351,-0.034817149117589,-0.001792572643607855],[0.5850983279392851,0.4065316054038703,1.810962358338938,0.01376185953617096,0.01594142697751522,0.03175611132755876,-0.006898078555241227],[0.7172239615316155,0.2238899786025286,1.696842729032094,-0.01817045427858829,0.01660290054045617,-0.05171917430125177,-0.009815539382398129],[0.9142189761236342,1.082112823612988,-1.405220512431755,0.000443273102864624,-0.009365271525457502,0.08447160273790361,-0.0036058130254969],[0.6294723056645337,1.732945843599737,1.777022918839191,-0.001941392151638865,0.003303682627156378,-0.07896711560897529,0.002879485003650189],[0.4357387804649328,0.5010022385977209,1.900073172135984,-0.01406717736274004,0.01696858056820929,0.001230340590700513,-0.00479192677885294],[0.6956052115634024,0.5032847383990884,-0.2815757592857586,0.005388897527009249,0.01084430906921625,0.05093915974721314,0.002276746430434287],[0.9627067124460403,0.7601233487948775,1.27054719701253,0.008628117097541691,-0.01079975291155279,0.02262614974752068,0.004537954246625304],[0.7728392365962722,0.917475612834096,-1.634601855006185,0.01667858057655394,-0.01399772465229034,0.04957051742821933,0.009999699918553233],[0.02766760896179298,1.796923429239541,-1.999617178430992,0.01897945313714445,0.002852038135752081,-0.008502259477972979,-0.009661070150323213],[-0.4877409586969666,0.07324037188664079,1.872988406113944,0.01507561554200948,0.01456154501065612,0.09680367298424244,0.003701562946662306],[-0.5062619156824744,1.916237798053771,0.1376202270869804,0.01594343490898609,-0.01487122787162662,-0.08409714316949249,0.004530428848229349],[-0.5567171905484987,1.517617604229599,1.830702094464548,0.00998115778900683,0.001981508452445269,-0.09356778985820711,-0.004169277199544012],[-0.03882527722922999,0.2147683384828269,1.999246014677103,-0.01451448887586594,-0.01878506701439619,-0.05250034304335714,-0.00293320897500962],[0.2474554688063716,1.141616895329207,1.968899267704243,0.01940504443831742,0.01799032714217902,0.04444312150590121,-2.586686052381999e-05],[0.7125622166036515,0.4055004995316267,-0.2983910722711042,-0.0132644306961447,0.01274269712157547,-0.06974962297827006,-0.009238791670650243],[-0.6498373892026278,1.680822551716119,-1.760073264622768,0.013456349959597,-0.01177144110202789,-0.04666379168629647,0.005431927680037916],[0.3869869101438372,1.616769928019494,-1.922085208306329,0.002314685219898818,-0.01733380580320954,-0.03634250522591174,0.00175432673189789],[-0.08030856463304088,0.1489623705856502,1.996770050937818,-0.009667826192453504,-0.001096206326037644,-0.03811547444202006,-0.002245030985213816]],\"center\":[0.09436564078304491,1.065959384782223,0.009650584311256394,0.002235548338955058,0.0009908154598750707,-0.002603746118860147,-0.0001947259930371232],\"scale\":[3.65653724774866,3.65653724774866,3.65653724774866,3.65653724774866,3.65653724774866,3.65653724774866,3.65653724774866],\"colnames\":[\"x1\",\"x2\",\"x3\",\"x4\",\"x5\",\"x6\",\"x7\"],\"rownames\":[],\"group\":[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"levels\":[\"data\",\"model\"],\"extraAxes\":null,\"extraAxesNames\":[],\"lineFrom\":[0,0,1,2,2,3,4,4,4,6,7,8,9,1,3,6,7,8,9,5,10],\"lineTo\":[1,2,3,3,4,5,5,6,7,9,9,9,11,2,4,7,8,10,10,6,11],\"lineColors\":[],\"axisColors\":[],\"levelColors\":[\"#6a3d9a\",\"#33a02c\"],\"colorVariation\":0.1,\"pointSize\":3,\"crosstalkGroup\":null,\"crosstalkKey\":null,\"crosstalkWantFilter\":true,\"state\":null},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reference/stat_trimesh.html","id":null,"dir":"Reference","previous_headings":"","what":"stat_trimesh Custom Stat for trimesh plot — stat_trimesh","title":"stat_trimesh Custom Stat for trimesh plot — stat_trimesh","text":"stat_trimesh Custom Stat trimesh plot","code":""},{"path":"/reference/stat_trimesh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stat_trimesh Custom Stat for trimesh plot — stat_trimesh","text":"","code":"stat_trimesh(   mapping = NULL,   data = NULL,   geom = GeomTrimesh$default_aes(),   position = \"identity\",   show.legend = NA,   outliers = TRUE,   inherit.aes = TRUE,   ... )"},{"path":"/reference/stat_trimesh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stat_trimesh Custom Stat for trimesh plot — stat_trimesh","text":"mapping Aesthetic mappings plot. data data plotted. geom geometry used plot. position position adjustment applied. show.legend Whether show legend layer. outliers Whether include outliers. inherit.aes Whether inherit aesthetics plot layer. ... Additional arguments passed `layer` function.","code":""},{"path":"/reference/stat_trimesh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stat_trimesh Custom Stat for trimesh plot — stat_trimesh","text":"`ggplot2` layer object.","code":""},{"path":"/reference/triangulate_bin_centroids.html","id":null,"dir":"Reference","previous_headings":"","what":"Triangulate Bin Centroids/ Bin means — triangulate_bin_centroids","title":"Triangulate Bin Centroids/ Bin means — triangulate_bin_centroids","text":"function triangulates bin centroids/ means using x y coordinates provided input data frame returns triangular object.","code":""},{"path":"/reference/triangulate_bin_centroids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triangulate Bin Centroids/ Bin means — triangulate_bin_centroids","text":"","code":"triangulate_bin_centroids(hex_bin_df, x = \"c_x\", y = \"c_y\")"},{"path":"/reference/triangulate_bin_centroids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Triangulate Bin Centroids/ Bin means — triangulate_bin_centroids","text":"hex_bin_df data frame containing bin centroids/ means. x name column contains x coordinates bin centroids/ means. y name column contains y coordinates bin centroids/ means.","code":""},{"path":"/reference/triangulate_bin_centroids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Triangulate Bin Centroids/ Bin means — triangulate_bin_centroids","text":"triangular object representing triangulated bin centroids/ means.","code":""},{"path":"/reference/triangulate_bin_centroids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Triangulate Bin Centroids/ Bin means — triangulate_bin_centroids","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled,                                         x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,                                         y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. centroid_list <- generate_full_grid_centroids(nldr_df = s_curve_noise_umap_scaled,                                              x = \"UMAP1\", y = \"UMAP2\",                                              num_bins_x = num_bins_x,                                              num_bins_y = num_bins_y,                                              x_start = NA, y_start = NA,                                              buffer_x = NA,                                              buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. all_centroids_df <- as.data.frame(do.call(cbind, centroid_list)) s_curve_noise_umap_scaled_rm_id <- s_curve_noise_umap_scaled |> dplyr::select(-ID) nldr_with_hb_id_list <- assign_data(nldr_df = s_curve_noise_umap_scaled_rm_id, centroid_df = all_centroids_df) umap_with_hb_id <- as.data.frame(do.call(cbind, nldr_with_hb_id_list)) std_counts_list <- compute_std_counts(nldr_df_with_hex_id = umap_with_hb_id) counts_df <- as.data.frame(do.call(cbind, std_counts_list)) df_bin_centroids <- extract_hexbin_centroids(centroids_df = all_centroids_df, counts_df = counts_df) triangulate_bin_centroids(hex_bin_df = df_bin_centroids, x = \"c_x\", y = \"c_y\") #> triangulation nodes with neigbours: #> node: (x,y): neighbours #> 1: (0,0) [3]: 2 3 9  #> 2: (0.3464102,0) [3]: 1 3 4  #> 3: (0.1732051,0.3) [5]: 1 2 4 5 9  #> 4: (0.5196152,0.3) [4]: 2 3 5 6  #> 5: (0.3464102,0.6) [6]: 3 4 6 7 8 9  #> 6: (0.6928203,0.6) [3]: 4 5 7  #> 7: (0.8660254,0.9) [5]: 5 6 8 10 12  #> 8: (0.6928203,1.2) [4]: 5 7 9 10  #> 9: (0.5196152,1.5) [6]: 1 3 5 8 10 11  #> 10: (0.8660254,1.5) [5]: 7 8 9 11 12  #> 11: (0.6928203,1.8) [3]: 9 10 12  #> 12: (1.03923,1.8) [3]: 7 10 11  #> number of nodes: 12  #> number of arcs: 25  #> number of boundary nodes: 8  #> boundary nodes:  1 2 4 6 7 9 11 12  #> number of triangles: 14  #> number of constraints: 0"},{"path":"/reference/weighted_highD_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Weighted Mean for High-Dimensional Data — weighted_highD_data","title":"Compute Weighted Mean for High-Dimensional Data — weighted_highD_data","text":"function computes weighted mean specified columns training data based distances average points non-linear dimensionality reduction (NLDR) space.","code":""},{"path":"/reference/weighted_highD_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Weighted Mean for High-Dimensional Data — weighted_highD_data","text":"","code":"weighted_highD_data(   training_data,   nldr_df_with_hex_id,   column_start_text = \"x\" )"},{"path":"/reference/weighted_highD_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Weighted Mean for High-Dimensional Data — weighted_highD_data","text":"training_data data frame containing training data ID column. nldr_df_with_hex_id data frame 2D embeddings hexagonal bin IDs. column_start_text starting text column names training_data considered weighted mean. Default \"x\".","code":""},{"path":"/reference/weighted_highD_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Weighted Mean for High-Dimensional Data — weighted_highD_data","text":"data frame computed weighted mean specified column. nldr_df_with_hex_id = UMAP_data_with_hb_id, column_start_text = \"x\")","code":""},{"path":"/reference/weighted_highD_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Weighted Mean for High-Dimensional Data — weighted_highD_data","text":"","code":"num_bins_x <- calculate_effective_x_bins(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", hex_size = NA, buffer_x = NA) #> Hex size is set to 0.2. #> Buffer along the x-axis is set to 0.519615242270663. num_bins_y <- calculate_effective_y_bins(nldr_df = s_curve_noise_umap_scaled,  y = \"UMAP2\", hex_size = NA, buffer_y = NA) #> Hex size is set to 0.2. #> Buffer along the y-axis is set to 0.45. hex_bin_obj <- generate_hex_binning_info(nldr_df = s_curve_noise_umap_scaled, x = \"UMAP1\", y = \"UMAP2\", num_bins_x = num_bins_x, num_bins_y = num_bins_y, x_start = NA, y_start = NA, buffer_x = NA, buffer_y = NA, hex_size = NA) #> Hex size is set to 0.2. #> x_start is set to 0. #> y_start is set to 0. #> Hex size is set to 0.2. UMAP_data_with_hb_id <- as.data.frame(do.call(cbind, hex_bin_obj$nldr_data_with_hex_id)) weighted_highD_data(training_data = s_curve_noise_training, nldr_df_with_hex_id = UMAP_data_with_hb_id, column_start_text = \"x\") #> # A tibble: 12 × 8 #>    hb_id      x1    x2     x3        x4          x5       x6        x7 #>    <dbl>   <dbl> <dbl>  <dbl>     <dbl>       <dbl>    <dbl>     <dbl> #>  1     1 -0.740  1.64  -1.59   0.00735   0.00230    -0.0181  -0.000667 #>  2     2  0.213  1.67  -1.92   0.00746  -0.00676    -0.00384 -0.000773 #>  3     6 -0.0990 0.360 -1.89   0.00323   0.00000525 -0.0230  -0.00184  #>  4     7  0.943  0.757 -1.32  -0.00720  -0.00319     0.0572   0.00230  #>  5    12  0.777  0.507 -0.432  0.000972  0.00661    -0.00780 -0.00178  #>  6    13  0.685  1.54  -0.338 -0.000269  0.00143     0.0207   0.000643 #>  7    18 -0.449  1.05   0.232  0.00434   0.00253     0.00246  0.00100  #>  8    23 -0.988  1.64   1.16   0.00754  -0.0104     -0.00129  0.00489  #>  9    27 -0.557  1.52   1.83   0.00998   0.00198    -0.0936  -0.00417  #> 10    28  0.0313 0.709  1.86  -0.00262   0.00414    -0.00802 -0.00120  #> 11    33  0.715  1.73   1.63   0.000951  0.00258    -0.0163   0.000170 #> 12    34  0.986  0.798  1.14   0.00179   0.00123     0.0192   0.000122"}]
