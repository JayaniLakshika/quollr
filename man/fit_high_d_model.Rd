% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{fit_high_d_model}
\alias{fit_high_d_model}
\title{Construct the 2D model and lift into high-D}
\usage{
fit_high_d_model(
  training_data,
  nldr_df_with_id,
  x = "UMAP1",
  y = "UMAP1",
  cell_area = 1,
  num_bins_x = NA,
  shape_val = NA,
  is_bin_centroid = TRUE,
  is_rm_lwd_hex = FALSE,
  benchmark_to_rm_lwd_hex = NA,
  is_avg_high_d = TRUE,
  column_start_text = "x"
)
}
\arguments{
\item{training_data}{A data frame containing the training high-dimensional data.}

\item{nldr_df_with_id}{A data frame containing 2D embeddings with an unique identifier.}

\item{x}{The name of the column that contains first 2D embeddings component.}

\item{y}{The name of the column that contains second 2D embeddings component.}

\item{cell_area}{The area of each hexagonal cell.}

\item{num_bins_x}{The number of bins along the x-axis for the hexagonal grid.}

\item{shape_val}{The shape parameter for the hexagons.}

\item{is_bin_centroid}{Logical, indicating whether to use bin centroids (default is TRUE).}

\item{is_rm_lwd_hex}{Logical, indicating whether to remove low-density hexagons (default is FALSE).}

\item{benchmark_to_rm_lwd_hex}{The benchmark value to remove low-density hexagons.}

\item{is_avg_high_d}{Logical, indicating whether to average the high-dimensional data within bins (default is TRUE).}

\item{column_start_text}{The text prefix for columns in the high-dimensional data.}
}
\value{
A list containing the data frame with high-dimensional coordinates for 2D bin centroids (\code{df_bin})
and the data frame containing information about hexagonal bin centroids (\code{df_bin_centroids}) in 2D.
}
\description{
This function fits a high-dimensional model using hexagonal bins and provides options
to customize the modeling process, including the choice of bin centroids or bin means,
removal of low-density hexagons, and averaging of high-dimensional data.
}
\examples{
fit_high_d_model(training_data = s_curve_noise_training, nldr_df_with_id = s_curve_noise_umap)

}
