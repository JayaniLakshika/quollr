// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gen_hex_coord_cpp
DataFrame gen_hex_coord_cpp(IntegerVector hexID, NumericVector c_x, NumericVector c_y, double a1);
RcppExport SEXP _quollr_gen_hex_coord_cpp(SEXP hexIDSEXP, SEXP c_xSEXP, SEXP c_ySEXP, SEXP a1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type hexID(hexIDSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_x(c_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_y(c_ySEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    rcpp_result_gen = Rcpp::wrap(gen_hex_coord_cpp(hexID, c_x, c_y, a1));
    return rcpp_result_gen;
END_RCPP
}
// compute_highd_dist
IntegerVector compute_highd_dist(NumericMatrix test_data, NumericMatrix centroids);
RcppExport SEXP _quollr_compute_highd_dist(SEXP test_dataSEXP, SEXP centroidsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type centroids(centroidsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_highd_dist(test_data, centroids));
    return rcpp_result_gen;
END_RCPP
}
// compute_errors
List compute_errors(NumericMatrix true_data, NumericMatrix pred_data);
RcppExport SEXP _quollr_compute_errors(SEXP true_dataSEXP, SEXP pred_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type true_data(true_dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pred_data(pred_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_errors(true_data, pred_data));
    return rcpp_result_gen;
END_RCPP
}
// calc_2d_dist_cpp
NumericVector calc_2d_dist_cpp(NumericVector x_from, NumericVector y_from, NumericVector x_to, NumericVector y_to);
RcppExport SEXP _quollr_calc_2d_dist_cpp(SEXP x_fromSEXP, SEXP y_fromSEXP, SEXP x_toSEXP, SEXP y_toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_from(x_fromSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_from(y_fromSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_to(x_toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_to(y_toSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_2d_dist_cpp(x_from, y_from, x_to, y_to));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_quollr_gen_hex_coord_cpp", (DL_FUNC) &_quollr_gen_hex_coord_cpp, 4},
    {"_quollr_compute_highd_dist", (DL_FUNC) &_quollr_compute_highd_dist, 2},
    {"_quollr_compute_errors", (DL_FUNC) &_quollr_compute_errors, 2},
    {"_quollr_calc_2d_dist_cpp", (DL_FUNC) &_quollr_calc_2d_dist_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_quollr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
